<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function KosHitac(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var x; // EjsS Model.Variables.promenljjive.x
  var y; // EjsS Model.Variables.promenljjive.y
  var vx; // EjsS Model.Variables.promenljjive.vx
  var vy; // EjsS Model.Variables.promenljjive.vy
  var v; // EjsS Model.Variables.promenljjive.v
  var theta; // EjsS Model.Variables.promenljjive.theta
  var t; // EjsS Model.Variables.promenljjive.t
  var dt; // EjsS Model.Variables.promenljjive.dt
  var xv; // EjsS Model.Variables.promenljjive.xv
  var yv; // EjsS Model.Variables.promenljjive.yv
  var dx; // EjsS Model.Variables.promenljjive.dx
  var dy; // EjsS Model.Variables.promenljjive.dy
  var css; // EjsS Model.Variables.promenljjive.css

  var g; // EjsS Model.Variables.konstante.g
  var PI; // EjsS Model.Variables.konstante.PI

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      v : v,
      theta : theta,
      t : t,
      dt : dt,
      xv : xv,
      yv : yv,
      dx : dx,
      dy : dy,
      css : css,
      g : g,
      PI : PI
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      v : v,
      theta : theta,
      t : t,
      dt : dt,
      xv : xv,
      yv : yv,
      dx : dx,
      dy : dy,
      css : css,
      g : g,
      PI : PI
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.xv != "undefined") xv = json.xv;
    if(typeof json.yv != "undefined") yv = json.yv;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.dy != "undefined") dy = json.dy;
    if(typeof json.css != "undefined") css = json.css;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.PI != "undefined") PI = json.PI;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.xv != "undefined") xv = json.xv;
    if(typeof json.yv != "undefined") yv = json.yv;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.dy != "undefined") dy = json.dy;
    if(typeof json.css != "undefined") css = json.css;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.PI != "undefined") PI = json.PI;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["inicijalizacija"] = true;
    __pagesEnabled["evolucija"] = true;
    __pagesEnabled["vektorBrzine"] = true;
  });

  _model.addToReset(function() {
    x = 0.5; // EjsS Model.Variables.promenljjive.x
    y = 0.5; // EjsS Model.Variables.promenljjive.y
    v = 25; // EjsS Model.Variables.promenljjive.v
    theta = 0.6; // EjsS Model.Variables.promenljjive.theta
    t = 0.0; // EjsS Model.Variables.promenljjive.t
    dt = 0.001; // EjsS Model.Variables.promenljjive.dt
    xv = x + v*Math.cos(theta); // EjsS Model.Variables.promenljjive.xv
    yv = y + v*Math.sin(theta); // EjsS Model.Variables.promenljjive.yv
    css = {"display":"inline-block", "margin":"10px", "vertical-align": "top"}; // EjsS Model.Variables.promenljjive.css
  });

  _model.addToReset(function() {
    g = 9.81; // EjsS Model.Variables.konstante.g
    PI = 3.14; // EjsS Model.Variables.konstante.PI
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(100);
    _model.setStepsPerDisplay(5);
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["inicijalizacija"]) return;
    vx =  v* Math.cos(theta);  // > Initialization.inicijalizacija:1
    vy = v * Math.sin(theta);  // > Initialization.inicijalizacija:2
    xv = x + v* Math.cos(theta);;  // > Initialization.inicijalizacija:3
    yv = y + v * Math.sin(theta);  // > Initialization.inicijalizacija:4
    _view.v_marker.setProperty("Display","block");  // > Initialization.inicijalizacija:5
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["evolucija"]) return;
    _view._update();  // > Evolution.evolucija:1
    vy = vy - g * dt;  // > Evolution.evolucija:2
    x = x + vx * dt;  // > Evolution.evolucija:3
    y = y + vy * dt - 0.5 * g * dt * dt;  // > Evolution.evolucija:4
    t = t + dt;  // > Evolution.evolucija:5
    v = Math.sqrt(vx*vx + vy*vy);  // > Evolution.evolucija:6
    theta = Math.atan2(vy, vx);  // > Evolution.evolucija:7
    if (y <= 0)   // > Evolution.evolucija:8
    {  // > Evolution.evolucija:9
      _pause();  // > Evolution.evolucija:10
    }  // > Evolution.evolucija:11
    if(_model.isPaused())  // > Evolution.evolucija:12
    _model._println("Pauza");  // > Evolution.evolucija:13
         // > Evolution.evolucija:14
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["vektorBrzine"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new KosHitac_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.drawingPanel.linkProperty("CSS",  function() { return css; }, function(_v) { css = _v; } ); // HtmlView Page linking property 'CSS' for element 'drawingPanel'
          _view.Lopta.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'Lopta'
          _view.Lopta.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'Lopta'
          _view.v_brzina.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'v_brzina'
          _view.v_brzina.linkProperty("SizeX",  function() { return v*0.1; } ); // HtmlView Page linking property 'SizeX' for element 'v_brzina'
          _view.v_brzina.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'v_brzina'
          _view.v_brzina.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'v_brzina'
          _view.v_marker.linkProperty("X",  function() { return xv; }, function(_v) { xv = _v; } ); // HtmlView Page linking property 'X' for element 'v_marker'
          _view.v_marker.linkProperty("Y",  function() { return yv; }, function(_v) { yv = _v; } ); // HtmlView Page linking property 'Y' for element 'v_marker'
          _view.v_marker.setAction("OnDrag", function(_data,_info) {
  dx = xv - x;
  dy = yv - y;
  v = Math.sqrt(dx*dx + dy*dy);
  theta = Math.atan2(dy, dx);

}); // HtmlView Page setting action 'OnDrag' for element 'v_marker'
          _view.plottingPanel.linkProperty("CSS",  function() { return css; }, function(_v) { css = _v; } ); // HtmlView Page linking property 'CSS' for element 'plottingPanel'
          _view.polozajY.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'polozajY'
          _view.polozajY.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'polozajY'
          _view.dugmadNavigacija.linkProperty("CSS",  function() { return css; }, function(_v) { css = _v; } ); // HtmlView Page linking property 'CSS' for element 'dugmadNavigacija'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.resetBtn.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetBtn'
          _view.panel1.linkProperty("CSS",  function() { return css; }, function(_v) { css = _v; } ); // HtmlView Page linking property 'CSS' for element 'panel1'
          _view.vreme.linkProperty("Value",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'Value' for element 'vreme'
          _view.panel2.linkProperty("CSS",  function() { return css; }, function(_v) { css = _v; } ); // HtmlView Page linking property 'CSS' for element 'panel2'
          _view.brzinaLab.linkProperty("CSS",  function() { return {padding:5}; } ); // HtmlView Page linking property 'CSS' for element 'brzinaLab'
          _view.brzina.linkProperty("Value",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'Value' for element 'brzina'
          _view.brzina.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'brzina'
          _view.panel3.linkProperty("CSS",  function() { return css; }, function(_v) { css = _v; } ); // HtmlView Page linking property 'CSS' for element 'panel3'
          _view.ugao.linkProperty("Value",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Value' for element 'ugao'
          _view.ugao.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'ugao'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(100);
  _model.setStepsPerDisplay(5);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function KosHitac_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = KosHitac_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('kos hitac opis','./KosHitac_Intro_1.html');
  _view._addDescriptionPage('Aktivnosti','./KosHitac_Intro_2.html');

  return _view;
} // end of main function

function KosHitac_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Kosi Hitac</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height",400) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("MinimumX",0.0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'drawingPanel'
      .setProperty("MinimumY",0.0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'drawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("MaximumY",40.0) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'drawingPanel'
      .setProperty("MaximumX",100) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Lopta", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Lopta'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Lopta'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Lopta'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"v_brzina", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'v_brzina'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'v_brzina'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"v_marker", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'v_marker'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'v_marker'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'v_marker'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'v_marker'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'v_marker'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'v_marker'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",400) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("TitleY","Y(m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","Vreme(s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("Title","Visina po vremenu") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("MaximumY",15) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"polozajY", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'polozajY'
      .setProperty("Maximum",10000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'polozajY'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polozajY'
      .setProperty("NoRepeat",false) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'polozajY'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"dugmadNavigacija", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'dugmadNavigacija'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.dugmadNavigacija) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetBtn", _view.dugmadNavigacija) // EJsS HtmlView.HtmlView Page: declaration of element 'resetBtn'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetBtn'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel1", _view.dugmadNavigacija) // EJsS HtmlView.HtmlView Page: declaration of element 'panel1'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vremeLab", _view.panel1) // EJsS HtmlView.HtmlView Page: declaration of element 'vremeLab'
      .setProperty("Text","vreme=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vremeLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"vreme", _view.panel1) // EJsS HtmlView.HtmlView Page: declaration of element 'vreme'
      .setProperty("Format","0.00s") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'vreme'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'vreme'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelVremeJed", _view.panel1) // EJsS HtmlView.HtmlView Page: declaration of element 'labelVremeJed'
      .setProperty("Text","s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelVremeJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.dugmadNavigacija) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"brzinaLab", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'brzinaLab'
      .setProperty("Text","brzina=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'brzinaLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"brzina", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'brzina'
      .setProperty("Format","0.00m/s") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'brzina'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'brzina'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelBrzinaJed", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'labelBrzinaJed'
      .setProperty("Text","m/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelBrzinaJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel3", _view.dugmadNavigacija) // EJsS HtmlView.HtmlView Page: declaration of element 'panel3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"ugaoLab", _view.panel3) // EJsS HtmlView.HtmlView Page: declaration of element 'ugaoLab'
      .setProperty("Text","theta=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ugaoLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"ugao", _view.panel3) // EJsS HtmlView.HtmlView Page: declaration of element 'ugao'
      .setProperty("Format","0.00rad") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'ugao'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelUgaoJed", _view.panel3) // EJsS HtmlView.HtmlView Page: declaration of element 'labelUgaoJed'
      .setProperty("Text","rad") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelUgaoJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"narrativePanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'narrativePanel'
      .setProperty("Html","<h1>Kosi hitac</h1> <p>Ovo je vrlo jednostavna simulacija kosog hica. Prikazuje kretanje u dve dimenzije(x i y pravac) tela mase m(lopta)</p> <p>Telo je bačeno sa površine zemlje nekom početnom brzinom v0 i pravac početne brzine je pod nekim uglom theta. Na telo deluje samo sila zemljine teže G=mg</p> <p>Telo će se kretati u isto vreme vertikalno naviše nekom brzinom vY i horizontalno brzinom vX i pri tome se trenutna brzina izračunava iterativno za svakih dt sekundi po formuli <strong>vy=v0y-g*t</strong> u Y pravcu dok je u X pravcu brzina konstantna i iznosi vX. S obzirom da se posmatra vreme od dt sekundi i da je početna brzina u tekućoj iteraciji zapravo krajnja brzina izračunata za  prethodnu iteraciju, formula za trenutnu brzinu u Y pravcu koja se upisuje u tab evolucije je :<strong>vY=vY-g*dt</strong>, gde je g gravitaciono ubrzanje i iznosi 9.81 m/s^2.</p> <p>Telo će dostići neku maksimalnu visinu HMax, a zatim će početi da pada istim ubrzanjem g. Trenutna brzina u Y pravcu se dalje izračunava po formuli <strong>vY=vY+g*dt.</strong> </p> <p>Telo će imati maksimalan domet <strong>DMax</strong> koji zavisi od početne brzine v, kao i pravca vektora v(ugao theta). </p> <p>Ove početne vrednosti se mogu menjati upisivanjem vrednosti u odgovarajuća polja za brzinu i ugao theta, pre početka puštanja simulacije. </p>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'narrativePanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Naslov i Autori:</b>
      <p>
      </p>
      <p>
 Milan Surla,Slobodan Tršek
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2019, Slobodan Tršek.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new KosHitac("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
