<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  <% include ../partials/head %>
    <meta charset="utf-8" />
	 <meta name="description" content="Simulacija slobodnog pada - uvod. 
   Simulacija kreirana pomoću alata Easy Java Simulation(EJS)." />
	<meta name="keywords" content="Slobodan pad,
	Opis simulacije,površine zemlje, sile zemljine teže, zemljine teže,
	ravnomerno ubrzano kretanje,vakuumu,udaru o zemlju,panelu za unos,
	početna visina,masa tela,položaj tela,
	trenutna brzina ,brzina pri zaustavljanju,kinetička energija,potencijalna energija,vektor brzine tela,vektor brzine, sila teže,
	 " />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function SlobodanPad(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var g; // EjsS Model.Variables.konstante.g
  var FRAME_HEIGHT; // EjsS Model.Variables.konstante.FRAME_HEIGHT
  var MAX_H; // EjsS Model.Variables.konstante.MAX_H

  var r; // EjsS Model.Variables.promenljive.r
  var m; // EjsS Model.Variables.promenljive.m
  var x; // EjsS Model.Variables.promenljive.x
  var h0; // EjsS Model.Variables.promenljive.h0
  var s; // EjsS Model.Variables.promenljive.s
  var y; // EjsS Model.Variables.promenljive.y
  var t; // EjsS Model.Variables.promenljive.t
  var dt; // EjsS Model.Variables.promenljive.dt
  var v; // EjsS Model.Variables.promenljive.v
  var n; // EjsS Model.Variables.promenljive.n
  var kretanjeY; // EjsS Model.Variables.promenljive.kretanjeY
  var brojac; // EjsS Model.Variables.promenljive.brojac
  var maxBrojac; // EjsS Model.Variables.promenljive.maxBrojac
  var i; // EjsS Model.Variables.promenljive.i
  var index; // EjsS Model.Variables.promenljive.index
  var brPromMin; // EjsS Model.Variables.promenljive.brPromMin
  var tZ; // EjsS Model.Variables.promenljive.tZ
  var vTz; // EjsS Model.Variables.promenljive.vTz
  var Hz; // EjsS Model.Variables.promenljive.Hz
  var t_button_color; // EjsS Model.Variables.promenljive.t_button_color
  var raz; // EjsS Model.Variables.promenljive.raz
  var Ek; // EjsS Model.Variables.promenljive.Ek
  var Ep; // EjsS Model.Variables.promenljive.Ep
  var tezina; // EjsS Model.Variables.promenljive.tezina
  var HMax; // EjsS Model.Variables.promenljive.HMax

  var lPom; // EjsS Model.Variables.geom.lPom

  var vR; // EjsS Model.Variables.racunski.vR
  var vTzR; // EjsS Model.Variables.racunski.vTzR
  var HzR; // EjsS Model.Variables.racunski.HzR
  var EkR; // EjsS Model.Variables.racunski.EkR
  var EpR; // EjsS Model.Variables.racunski.EpR

  var pad; // EjsS Model.Variables.logicke.pad
  var polozaji; // EjsS Model.Variables.logicke.polozaji
  var zaustavljanje; // EjsS Model.Variables.logicke.zaustavljanje
  var prikazH; // EjsS Model.Variables.logicke.prikazH
  var odbijanje; // EjsS Model.Variables.logicke.odbijanje
  var prikazBrz; // EjsS Model.Variables.logicke.prikazBrz
  var prikazSila; // EjsS Model.Variables.logicke.prikazSila
  var zvukUklj; // EjsS Model.Variables.logicke.zvukUklj

  var cssLevo; // EjsS Model.Variables.css.cssLevo

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      g : g,
      FRAME_HEIGHT : FRAME_HEIGHT,
      MAX_H : MAX_H,
      r : r,
      m : m,
      x : x,
      h0 : h0,
      s : s,
      y : y,
      t : t,
      dt : dt,
      v : v,
      n : n,
      kretanjeY : kretanjeY,
      brojac : brojac,
      maxBrojac : maxBrojac,
      i : i,
      index : index,
      brPromMin : brPromMin,
      tZ : tZ,
      vTz : vTz,
      Hz : Hz,
      t_button_color : t_button_color,
      raz : raz,
      Ek : Ek,
      Ep : Ep,
      tezina : tezina,
      HMax : HMax,
      lPom : lPom,
      vR : vR,
      vTzR : vTzR,
      HzR : HzR,
      EkR : EkR,
      EpR : EpR,
      pad : pad,
      polozaji : polozaji,
      zaustavljanje : zaustavljanje,
      prikazH : prikazH,
      odbijanje : odbijanje,
      prikazBrz : prikazBrz,
      prikazSila : prikazSila,
      zvukUklj : zvukUklj,
      cssLevo : cssLevo
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      g : g,
      FRAME_HEIGHT : FRAME_HEIGHT,
      MAX_H : MAX_H,
      r : r,
      m : m,
      x : x,
      h0 : h0,
      s : s,
      y : y,
      t : t,
      dt : dt,
      v : v,
      n : n,
      kretanjeY : kretanjeY,
      brojac : brojac,
      maxBrojac : maxBrojac,
      i : i,
      index : index,
      brPromMin : brPromMin,
      tZ : tZ,
      vTz : vTz,
      Hz : Hz,
      t_button_color : t_button_color,
      raz : raz,
      Ek : Ek,
      Ep : Ep,
      tezina : tezina,
      HMax : HMax,
      lPom : lPom,
      vR : vR,
      vTzR : vTzR,
      HzR : HzR,
      EkR : EkR,
      EpR : EpR,
      pad : pad,
      polozaji : polozaji,
      zaustavljanje : zaustavljanje,
      prikazH : prikazH,
      odbijanje : odbijanje,
      prikazBrz : prikazBrz,
      prikazSila : prikazSila,
      zvukUklj : zvukUklj,
      cssLevo : cssLevo
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.FRAME_HEIGHT != "undefined") FRAME_HEIGHT = json.FRAME_HEIGHT;
    if(typeof json.MAX_H != "undefined") MAX_H = json.MAX_H;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.h0 != "undefined") h0 = json.h0;
    if(typeof json.s != "undefined") s = json.s;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.kretanjeY != "undefined") kretanjeY = json.kretanjeY;
    if(typeof json.brojac != "undefined") brojac = json.brojac;
    if(typeof json.maxBrojac != "undefined") maxBrojac = json.maxBrojac;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.index != "undefined") index = json.index;
    if(typeof json.brPromMin != "undefined") brPromMin = json.brPromMin;
    if(typeof json.tZ != "undefined") tZ = json.tZ;
    if(typeof json.vTz != "undefined") vTz = json.vTz;
    if(typeof json.Hz != "undefined") Hz = json.Hz;
    if(typeof json.t_button_color != "undefined") t_button_color = json.t_button_color;
    if(typeof json.raz != "undefined") raz = json.raz;
    if(typeof json.Ek != "undefined") Ek = json.Ek;
    if(typeof json.Ep != "undefined") Ep = json.Ep;
    if(typeof json.tezina != "undefined") tezina = json.tezina;
    if(typeof json.HMax != "undefined") HMax = json.HMax;
    if(typeof json.lPom != "undefined") lPom = json.lPom;
    if(typeof json.vR != "undefined") vR = json.vR;
    if(typeof json.vTzR != "undefined") vTzR = json.vTzR;
    if(typeof json.HzR != "undefined") HzR = json.HzR;
    if(typeof json.EkR != "undefined") EkR = json.EkR;
    if(typeof json.EpR != "undefined") EpR = json.EpR;
    if(typeof json.pad != "undefined") pad = json.pad;
    if(typeof json.polozaji != "undefined") polozaji = json.polozaji;
    if(typeof json.zaustavljanje != "undefined") zaustavljanje = json.zaustavljanje;
    if(typeof json.prikazH != "undefined") prikazH = json.prikazH;
    if(typeof json.odbijanje != "undefined") odbijanje = json.odbijanje;
    if(typeof json.prikazBrz != "undefined") prikazBrz = json.prikazBrz;
    if(typeof json.prikazSila != "undefined") prikazSila = json.prikazSila;
    if(typeof json.zvukUklj != "undefined") zvukUklj = json.zvukUklj;
    if(typeof json.cssLevo != "undefined") cssLevo = json.cssLevo;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.FRAME_HEIGHT != "undefined") FRAME_HEIGHT = json.FRAME_HEIGHT;
    if(typeof json.MAX_H != "undefined") MAX_H = json.MAX_H;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.h0 != "undefined") h0 = json.h0;
    if(typeof json.s != "undefined") s = json.s;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.kretanjeY != "undefined") kretanjeY = json.kretanjeY;
    if(typeof json.brojac != "undefined") brojac = json.brojac;
    if(typeof json.maxBrojac != "undefined") maxBrojac = json.maxBrojac;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.index != "undefined") index = json.index;
    if(typeof json.brPromMin != "undefined") brPromMin = json.brPromMin;
    if(typeof json.tZ != "undefined") tZ = json.tZ;
    if(typeof json.vTz != "undefined") vTz = json.vTz;
    if(typeof json.Hz != "undefined") Hz = json.Hz;
    if(typeof json.t_button_color != "undefined") t_button_color = json.t_button_color;
    if(typeof json.raz != "undefined") raz = json.raz;
    if(typeof json.Ek != "undefined") Ek = json.Ek;
    if(typeof json.Ep != "undefined") Ep = json.Ep;
    if(typeof json.tezina != "undefined") tezina = json.tezina;
    if(typeof json.HMax != "undefined") HMax = json.HMax;
    if(typeof json.lPom != "undefined") lPom = json.lPom;
    if(typeof json.vR != "undefined") vR = json.vR;
    if(typeof json.vTzR != "undefined") vTzR = json.vTzR;
    if(typeof json.HzR != "undefined") HzR = json.HzR;
    if(typeof json.EkR != "undefined") EkR = json.EkR;
    if(typeof json.EpR != "undefined") EpR = json.EpR;
    if(typeof json.pad != "undefined") pad = json.pad;
    if(typeof json.polozaji != "undefined") polozaji = json.polozaji;
    if(typeof json.zaustavljanje != "undefined") zaustavljanje = json.zaustavljanje;
    if(typeof json.prikazH != "undefined") prikazH = json.prikazH;
    if(typeof json.odbijanje != "undefined") odbijanje = json.odbijanje;
    if(typeof json.prikazBrz != "undefined") prikazBrz = json.prikazBrz;
    if(typeof json.prikazSila != "undefined") prikazSila = json.prikazSila;
    if(typeof json.zvukUklj != "undefined") zvukUklj = json.zvukUklj;
    if(typeof json.cssLevo != "undefined") cssLevo = json.cssLevo;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    g = 9.81; // EjsS Model.Variables.konstante.g
    FRAME_HEIGHT = 500; // EjsS Model.Variables.konstante.FRAME_HEIGHT
    MAX_H = 50; // EjsS Model.Variables.konstante.MAX_H
  });

  _model.addToReset(function() {
    r = 0.6; // EjsS Model.Variables.promenljive.r
    m = 1; // EjsS Model.Variables.promenljive.m
    x = 0; // EjsS Model.Variables.promenljive.x
    h0 = 35; // EjsS Model.Variables.promenljive.h0
    y = 5; // EjsS Model.Variables.promenljive.y
    t = 0; // EjsS Model.Variables.promenljive.t
    dt = 0.02; // EjsS Model.Variables.promenljive.dt
    v = 0; // EjsS Model.Variables.promenljive.v
    n = 200; // EjsS Model.Variables.promenljive.n
    kretanjeY = new Array(n); // EjsS Model.Variables.promenljive.kretanjeY
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.promenljive.kretanjeY
        kretanjeY[_i0] = 0.0;  // EjsS Model.Variables.promenljive.kretanjeY
      }
    }());
    brojac = 0.0; // EjsS Model.Variables.promenljive.brojac
    maxBrojac = 19.99; // EjsS Model.Variables.promenljive.maxBrojac
    i = 0; // EjsS Model.Variables.promenljive.i
    index = 1; // EjsS Model.Variables.promenljive.index
    brPromMin = 0; // EjsS Model.Variables.promenljive.brPromMin
    tZ = 50; // EjsS Model.Variables.promenljive.tZ
    vTz = 0; // EjsS Model.Variables.promenljive.vTz
    Hz = 0; // EjsS Model.Variables.promenljive.Hz
    t_button_color = "LightGray"; // EjsS Model.Variables.promenljive.t_button_color
    raz = 10; // EjsS Model.Variables.promenljive.raz
    Ek = 0; // EjsS Model.Variables.promenljive.Ek
    Ep = 0; // EjsS Model.Variables.promenljive.Ep
    tezina = 0; // EjsS Model.Variables.promenljive.tezina
    HMax = MAX_H; // EjsS Model.Variables.promenljive.HMax
  });

  _model.addToReset(function() {
    lPom = 1; // EjsS Model.Variables.geom.lPom
  });

  _model.addToReset(function() {
    vR = 0; // EjsS Model.Variables.racunski.vR
    vTzR = 0; // EjsS Model.Variables.racunski.vTzR
    HzR = 0; // EjsS Model.Variables.racunski.HzR
    EkR = 0; // EjsS Model.Variables.racunski.EkR
    EpR = 0; // EjsS Model.Variables.racunski.EpR
  });

  _model.addToReset(function() {
    pad = true; // EjsS Model.Variables.logicke.pad
    polozaji = true; // EjsS Model.Variables.logicke.polozaji
    zaustavljanje = false; // EjsS Model.Variables.logicke.zaustavljanje
    prikazH = false; // EjsS Model.Variables.logicke.prikazH
    odbijanje = true; // EjsS Model.Variables.logicke.odbijanje
    prikazBrz = false; // EjsS Model.Variables.logicke.prikazBrz
    prikazSila = false; // EjsS Model.Variables.logicke.prikazSila
    zvukUklj = true; // EjsS Model.Variables.logicke.zvukUklj
  });

  _model.addToReset(function() {
    cssLevo = {"text-align":"left","margin-top":"10px"}; // EjsS Model.Variables.css.cssLevo
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(23);
    _model.setStepsPerDisplay(1);
  });

  function updateSim () {  // > CustomCode.Lib Page:1
     h0=_view.sliderH.getProperty("Value");  // > CustomCode.Lib Page:2
  /*  alert("updateSim "+h0); */  // > CustomCode.Lib Page:3
    y=h0;  // > CustomCode.Lib Page:4
    _view._update();  // > CustomCode.Lib Page:5
    /*_view.sliderH.setChanged(true);*/  // > CustomCode.Lib Page:6
    _initialize();  // > CustomCode.Lib Page:7
      // > CustomCode.Lib Page:8
      // > CustomCode.Lib Page:9
  }  // > CustomCode.Lib Page:10
  function updateTz () {  // > CustomCode.Lib Page:11
     tZ=_view.sliderTz.getProperty("Value");  // > CustomCode.Lib Page:12
   /* alert("updateTz "+tZ); */  // > CustomCode.Lib Page:13
    _view._update();  // > CustomCode.Lib Page:14
    _initialize();  // > CustomCode.Lib Page:15
      // > CustomCode.Lib Page:16
      // > CustomCode.Lib Page:17
  }  // > CustomCode.Lib Page:18
  /*azuriranje mase*/  // > CustomCode.Lib Page:19
  function updateM () {  // > CustomCode.Lib Page:20
     m=_view.sliderM.getProperty("Value");  // > CustomCode.Lib Page:21
    _view._update();  // > CustomCode.Lib Page:22
    _initialize();    // > CustomCode.Lib Page:23
  }  // > CustomCode.Lib Page:24
  function State_modified() {  // > CustomCode.Lib Page:25
    t_button_color="yellow";  // > CustomCode.Lib Page:26
  /*  alert("State_modified ");*/  // > CustomCode.Lib Page:27
   /* _view.sliderH.setChanged(true);*/  // > CustomCode.Lib Page:28
  }  // > CustomCode.Lib Page:29
  function zaustavljanjeFun () {  // > CustomCode.Lib Page:30
   if(!zaustavljanje && odbijanje)  // > CustomCode.Lib Page:31
  {  // > CustomCode.Lib Page:32
    vR=Math.sqrt(2*g*h0);  // > CustomCode.Lib Page:33
    vTzR=vR;  // > CustomCode.Lib Page:34
    HzR=r;  // > CustomCode.Lib Page:35
  }  // > CustomCode.Lib Page:36
  else if(!zaustavljanje && !odbijanje){  // > CustomCode.Lib Page:37
    vR=Math.sqrt(2*g*h0);  // > CustomCode.Lib Page:38
    vTzR=vR;  // > CustomCode.Lib Page:39
    HzR=r;  // > CustomCode.Lib Page:40
      // > CustomCode.Lib Page:41
    }  // > CustomCode.Lib Page:42
  else{  // > CustomCode.Lib Page:43
    vTzR=-g*tZ;  // > CustomCode.Lib Page:44
    vR=vTzR;  // > CustomCode.Lib Page:45
    HzR=h0-g*tZ*tZ/2;  // > CustomCode.Lib Page:46
     // > CustomCode.Lib Page:47
   }  // > CustomCode.Lib Page:48
   EkR=Math.abs(m*vTzR*vTzR/2);  // > CustomCode.Lib Page:49
    EpR=m*g*HzR;  // > CustomCode.Lib Page:50
    }  // > CustomCode.Lib Page:51

  function muzikaStart() {  // > CustomCode.zvuk:1
    _play();   // > CustomCode.zvuk:2
    if(zvukUklj)_view.audio.play();  // > CustomCode.zvuk:3
  }  // > CustomCode.zvuk:4
  function muzikaStop() {  // > CustomCode.zvuk:5
    _pause();  // > CustomCode.zvuk:6
     if(zvukUklj)_view.audio.pause();  // > CustomCode.zvuk:7
  }  // > CustomCode.zvuk:8
  function padTela() {  // > CustomCode.zvuk:9
       // > CustomCode.zvuk:10
     _view.audio.pause();  // > CustomCode.zvuk:11
     _view.padT.play();  // > CustomCode.zvuk:12
  }  // > CustomCode.zvuk:13
  function odbijanjeTela(){  // > CustomCode.zvuk:14
    _view.boing.play();  // > CustomCode.zvuk:15
    }  // > CustomCode.zvuk:16

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
     /*alert("Inicijalizacija");*/  // > Initialization.Init Page:1
    y=h0;  // > Initialization.Init Page:2
    HMax=h0*1.2;  // > Initialization.Init Page:3
    lPom=HMax/10;  // > Initialization.Init Page:4
    raz=FRAME_HEIGHT/HMax;  // > Initialization.Init Page:5
    v=0;  // > Initialization.Init Page:6
    t=0.0;  // > Initialization.Init Page:7
    /*tezina=m*g;*/  // > Initialization.Init Page:8
    for (i=0; i<n; i++)  // > Initialization.Init Page:9
    {  // > Initialization.Init Page:10
    kretanjeY[i] = y;  // > Initialization.Init Page:11
    }  // > Initialization.Init Page:12
    brojac=0.0;  // > Initialization.Init Page:13
    index=1;  // > Initialization.Init Page:14
    brPromMin=2/dt;  // > Initialization.Init Page:15
    prikazH=false;  // > Initialization.Init Page:16
    Ek=m*v*v/2;  // > Initialization.Init Page:17
    Ep=m*g*y;  // > Initialization.Init Page:18
    tezina=m*g;  // > Initialization.Init Page:19
    /*Racunski*/  // > Initialization.Init Page:20
    /*Ako nije definisano vreme zaustavljanja racuna se brzina pri padu*/  // > Initialization.Init Page:21
    zaustavljanjeFun ();  // > Initialization.Init Page:22
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    t=t+dt;  // > Evolution.Evol Page:1
    var dy;  // > Evolution.Evol Page:2
    dy=v*dt-g*dt*dt/2;  // > Evolution.Evol Page:3
    y=y+dy;  // > Evolution.Evol Page:4
    v=v-g*dt;  // > Evolution.Evol Page:5
    if(pad && y<=2*r){  // > Evolution.Evol Page:6
      if(!odbijanje){  // > Evolution.Evol Page:7
         // > Evolution.Evol Page:8
          zaustavljanje=true;  // > Evolution.Evol Page:9
          tZ=t;  // > Evolution.Evol Page:10
        }  // > Evolution.Evol Page:11
        else{  // > Evolution.Evol Page:12
         // > Evolution.Evol Page:13
            // > Evolution.Evol Page:14
          v=-0.8*v;  // > Evolution.Evol Page:15
          pad=false;  // > Evolution.Evol Page:16
          polozaji=false;  // > Evolution.Evol Page:17
         if(zvukUklj)odbijanjeTela();  // > Evolution.Evol Page:18
      }  // > Evolution.Evol Page:19
    }  // > Evolution.Evol Page:20
    if(!pad && v<=0){    // > Evolution.Evol Page:21
      pad=true;  // > Evolution.Evol Page:22
     }  // > Evolution.Evol Page:23
     if(y<2*r+0.2 && Math.abs(v)<0.2){  // > Evolution.Evol Page:24
       _pause();  // > Evolution.Evol Page:25
        padTela();  // > Evolution.Evol Page:26
       }  // > Evolution.Evol Page:27
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    brojac=brojac+brPromMin*dt;  // > FixedRelations.FixRel Page:1
    if(polozaji){  // > FixedRelations.FixRel Page:2
    for (i=index; i<n; i++)  // > FixedRelations.FixRel Page:3
    {  // > FixedRelations.FixRel Page:4
    kretanjeY[i] = y;  // > FixedRelations.FixRel Page:5
    }  // > FixedRelations.FixRel Page:6
    if (brojac >= maxBrojac)  // > FixedRelations.FixRel Page:7
    {  // > FixedRelations.FixRel Page:8
      index = index + 1;  // > FixedRelations.FixRel Page:9
      brojac = 0.0;  // > FixedRelations.FixRel Page:10
    }  // > FixedRelations.FixRel Page:11
    }  // > FixedRelations.FixRel Page:12
    if(zaustavljanje && t>=tZ)  // > FixedRelations.FixRel Page:13
    {  // > FixedRelations.FixRel Page:14
        // > FixedRelations.FixRel Page:15
      vTz=v;  // > FixedRelations.FixRel Page:16
      prikazH=true;  // > FixedRelations.FixRel Page:17
      Hz=y-2*r;  // > FixedRelations.FixRel Page:18
      _pause();  // > FixedRelations.FixRel Page:19
      padTela();  // > FixedRelations.FixRel Page:20
        // > FixedRelations.FixRel Page:21
    }  // > FixedRelations.FixRel Page:22
    Ek=m*v*v/2;  // > FixedRelations.FixRel Page:23
    Ep=m*g*y;  // > FixedRelations.FixRel Page:24
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 500, height : 500 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new SlobodanPad_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.plottingPanel.linkProperty("Height",  function() { return FRAME_HEIGHT; }, function(_v) { FRAME_HEIGHT = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return "v="+v.toFixed(2)+"m/s"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "time="+t.toFixed(2); } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return HMax; }, function(_v) { HMax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return "H="+(y-2*r).toFixed(2)+"m"; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.telo.linkProperty("SizeX",  function() { return r*2*raz; } ); // HtmlView Page linking property 'SizeX' for element 'telo'
          _view.telo.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'telo'
          _view.telo.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'telo'
          _view.telo.linkProperty("SizeY",  function() { return r*2*raz; } ); // HtmlView Page linking property 'SizeY' for element 'telo'
          _view.shapeSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeX",  function() { return 0.8*r*raz; } ); // HtmlView Page linking property 'SizeX' for element 'shapeSet'
          _view.shapeSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSet'
          _view.shapeSet.linkProperty("Y",  function() { return kretanjeY; }, function(_v) { kretanjeY = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeY",  function() { return 0.8*r*raz; } ); // HtmlView Page linking property 'SizeY' for element 'shapeSet'
          _view.visinaPom.linkProperty("SizeX",  function() { return -lPom; } ); // HtmlView Page linking property 'SizeX' for element 'visinaPom'
          _view.visinaPom.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'visinaPom'
          _view.visinaPom.linkProperty("Y",  function() { return h0; }, function(_v) { h0 = _v; } ); // HtmlView Page linking property 'Y' for element 'visinaPom'
          _view.h0Kota.linkProperty("X",  function() { return -lPom; } ); // HtmlView Page linking property 'X' for element 'h0Kota'
          _view.h0Kota.linkProperty("SizeY",  function() { return h0-(lPom/10); } ); // HtmlView Page linking property 'SizeY' for element 'h0Kota'
          _view.H0.linkProperty("Rotate",  function() { return Math.PI/2; } ); // HtmlView Page linking property 'Rotate' for element 'H0'
          _view.H0.linkProperty("X",  function() { return -lPom*1.2; } ); // HtmlView Page linking property 'X' for element 'H0'
          _view.H0.linkProperty("Y",  function() { return h0/2; } ); // HtmlView Page linking property 'Y' for element 'H0'
          _view.hPom.linkProperty("SizeX",  function() { return lPom; }, function(_v) { lPom = _v; } ); // HtmlView Page linking property 'SizeX' for element 'hPom'
          _view.hPom.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'hPom'
          _view.hPom.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'hPom'
          _view.hPom.linkProperty("Visibility",  function() { return prikazH; }, function(_v) { prikazH = _v; } ); // HtmlView Page linking property 'Visibility' for element 'hPom'
          _view.hKota.linkProperty("X",  function() { return lPom; }, function(_v) { lPom = _v; } ); // HtmlView Page linking property 'X' for element 'hKota'
          _view.hKota.linkProperty("Visibility",  function() { return prikazH; }, function(_v) { prikazH = _v; } ); // HtmlView Page linking property 'Visibility' for element 'hKota'
          _view.hKota.linkProperty("SizeY",  function() { return y-(lPom/10); } ); // HtmlView Page linking property 'SizeY' for element 'hKota'
          _view.H.linkProperty("Rotate",  function() { return Math.PI/2; } ); // HtmlView Page linking property 'Rotate' for element 'H'
          _view.H.linkProperty("X",  function() { return lPom*0.8; } ); // HtmlView Page linking property 'X' for element 'H'
          _view.H.linkProperty("Y",  function() { return y/2; } ); // HtmlView Page linking property 'Y' for element 'H'
          _view.H.linkProperty("Visibility",  function() { return prikazH; }, function(_v) { prikazH = _v; } ); // HtmlView Page linking property 'Visibility' for element 'H'
          _view.vVec.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'vVec'
          _view.vVec.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'vVec'
          _view.vVec.linkProperty("Visibility",  function() { return prikazBrz; }, function(_v) { prikazBrz = _v; } ); // HtmlView Page linking property 'Visibility' for element 'vVec'
          _view.vVec.linkProperty("SizeY",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vVec'
          _view.GVec.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'GVec'
          _view.GVec.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'GVec'
          _view.GVec.linkProperty("Visibility",  function() { return prikazSila; }, function(_v) { prikazSila = _v; } ); // HtmlView Page linking property 'Visibility' for element 'GVec'
          _view.GVec.linkProperty("SizeY",  function() { return -tezina; } ); // HtmlView Page linking property 'SizeY' for element 'GVec'
          _view.runPauseButton.setAction("OffClick", muzikaStop); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", muzikaStart); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.prikazV.linkProperty("Checked",  function() { return prikazBrz; }, function(_v) { prikazBrz = _v; } ); // HtmlView Page linking property 'Checked' for element 'prikazV'
          _view.prikazSilaChb.linkProperty("Checked",  function() { return prikazSila; }, function(_v) { prikazSila = _v; } ); // HtmlView Page linking property 'Checked' for element 'prikazSilaChb'
          _view.zvukChb.linkProperty("Checked",  function() { return zvukUklj; }, function(_v) { zvukUklj = _v; } ); // HtmlView Page linking property 'Checked' for element 'zvukChb'
          _view.zvukChb.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'zvukChb'
          _view.hPan.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'hPan'
          _view.sliderH.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'sliderH'
          _view.sliderH.setAction("OnRelease", updateSim); // HtmlView Page setting action 'OnRelease' for element 'sliderH'
          _view.sliderH.linkProperty("Value",  function() { return h0; }, function(_v) { h0 = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderH'
          _view.panZaust.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panZaust'
          _view.zaustaviChB.linkProperty("Checked",  function() { return zaustavljanje; }, function(_v) { zaustavljanje = _v; } ); // HtmlView Page linking property 'Checked' for element 'zaustaviChB'
          _view.panelTZaust.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelTZaust'
          _view.sliderTz.setAction("OnRelease", function(_data,_info) {
  updateTz();

}); // HtmlView Page setting action 'OnRelease' for element 'sliderTz'
          _view.sliderTz.linkProperty("ShowText",  function() { return zaustavljanje; }, function(_v) { zaustavljanje = _v; } ); // HtmlView Page linking property 'ShowText' for element 'sliderTz'
          _view.sliderTz.linkProperty("Value",  function() { return tZ; }, function(_v) { tZ = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderTz'
          _view.sliderTz.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'sliderTz'
          _view.sliderTz.linkProperty("Disabled",  function() { return !zaustavljanje; } ); // HtmlView Page linking property 'Disabled' for element 'sliderTz'
          _view.panelOdbijanje.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelOdbijanje'
          _view.odbijanjeChB.linkProperty("Checked",  function() { return odbijanje; }, function(_v) { odbijanje = _v; } ); // HtmlView Page linking property 'Checked' for element 'odbijanjeChB'
          _view.panelMasa.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelMasa'
          _view.sliderM.setAction("OnRelease", function(_data,_info) {
  updateM();

}); // HtmlView Page setting action 'OnRelease' for element 'sliderM'
          _view.sliderM.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderM'
          _view.sliderM.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'sliderM'
          _view.vPanel.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'vPanel'
          _view.vTF.linkProperty("Value",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'Value' for element 'vTF'
          _view.panelTz.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelTz'
          _view.vTzTF.linkProperty("Value",  function() { return vTz; }, function(_v) { vTz = _v; } ); // HtmlView Page linking property 'Value' for element 'vTzTF'
          _view.panelHz.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelHz'
          _view.HzTF.linkProperty("Background",  function() { return t_button_color; }, function(_v) { t_button_color = _v; } ); // HtmlView Page linking property 'Background' for element 'HzTF'
          _view.HzTF.linkProperty("Value",  function() { return Hz; }, function(_v) { Hz = _v; } ); // HtmlView Page linking property 'Value' for element 'HzTF'
          _view.EkPanel.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'EkPanel'
          _view.EkTF.linkProperty("Value",  function() { return Ek; }, function(_v) { Ek = _v; } ); // HtmlView Page linking property 'Value' for element 'EkTF'
          _view.EpPanel.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'EpPanel'
          _view.EpTF.linkProperty("Value",  function() { return Ep; }, function(_v) { Ep = _v; } ); // HtmlView Page linking property 'Value' for element 'EpTF'
          _view.vPanel2.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'vPanel2'
          _view.vRTF.linkProperty("Value",  function() { return vR; }, function(_v) { vR = _v; } ); // HtmlView Page linking property 'Value' for element 'vRTF'
          _view.panelTzRacunski.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelTzRacunski'
          _view.vTzTFRac.linkProperty("Value",  function() { return vTzR; }, function(_v) { vTzR = _v; } ); // HtmlView Page linking property 'Value' for element 'vTzTFRac'
          _view.panelHzRac.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelHzRac'
          _view.HzTFRac.linkProperty("Background",  function() { return t_button_color; }, function(_v) { t_button_color = _v; } ); // HtmlView Page linking property 'Background' for element 'HzTFRac'
          _view.HzTFRac.linkProperty("Value",  function() { return HzR; }, function(_v) { HzR = _v; } ); // HtmlView Page linking property 'Value' for element 'HzTFRac'
          _view.EkPanelRac.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'EkPanelRac'
          _view.EkTFRac.linkProperty("Value",  function() { return EkR; }, function(_v) { EkR = _v; } ); // HtmlView Page linking property 'Value' for element 'EkTFRac'
          _view.EpPanelRac.linkProperty("CSS",  function() { return cssLevo; }, function(_v) { cssLevo = _v; } ); // HtmlView Page linking property 'CSS' for element 'EpPanelRac'
          _view.EpTFRac.linkProperty("Value",  function() { return EpR; }, function(_v) { EpR = _v; } ); // HtmlView Page linking property 'Value' for element 'EpTFRac'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(23);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function SlobodanPad_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = SlobodanPad_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function SlobodanPad_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Slobodan pad</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelSimulacija", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panelSimulacija'
      .setProperty("CSS",{"display":"inline-block","vertical-align": "top","margin":"10px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panelSimulacija'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panelSimulacija) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
	  .setProperty("Height","auto") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("XTicks",15) // EJsS HtmlView.HtmlView Page: setting property 'XTicks' for element 'plottingPanel'
      .setProperty("AxisYFont","normal bold 10px ") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanel'
      .setProperty("AxisXShow",true) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'plottingPanel'
      .setProperty("XAutoStepMin",40) // EJsS HtmlView.HtmlView Page: setting property 'XAutoStepMin' for element 'plottingPanel'
      .setProperty("GridXLineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'GridXLineColor' for element 'plottingPanel'
      .setProperty("GridXShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      .setProperty("CSS",{"display":"block","vertical-align": "top","margin":"10px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'plottingPanel'
      .setProperty("Title","Slobodan pad") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumX",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("GridYShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AxisYShow",true) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'plottingPanel'
      .setProperty("TitleY","visina[m]") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","x") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginX",1) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanel'
      .setProperty("MarginY",1) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      .setProperty("XScale",10) // EJsS HtmlView.HtmlView Page: setting property 'XScale' for element 'plottingPanel'
      .setProperty("TitleFont","normal bold 10px ") // EJsS HtmlView.HtmlView Page: setting property 'TitleFont' for element 'plottingPanel'
      .setProperty("YAutoStepMin",40) // EJsS HtmlView.HtmlView Page: setting property 'YAutoStepMin' for element 'plottingPanel'
      .setProperty("XStep",15) // EJsS HtmlView.HtmlView Page: setting property 'XStep' for element 'plottingPanel'	 
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"telo", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'telo'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'telo'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'telo'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'telo'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'telo'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'telo'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"xOsa", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xOsa'
      .setProperty("SizeX",25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xOsa'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'xOsa'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xOsa'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xOsa'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xOsa'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xOsa'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"yOsa", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yOsa'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yOsa'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yOsa'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yOsa'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'yOsa'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yOsa'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yOsa'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSet'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSet'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSet'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'shapeSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSet'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'shapeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"tlo", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tlo'
      .setProperty("FillColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'tlo'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'tlo'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'tlo'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'tlo'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'tlo'
      .setProperty("SizeY",-1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'tlo'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'tlo'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"visinaPom", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'visinaPom'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'visinaPom'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'visinaPom'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'visinaPom'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"h0Kota", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'h0Kota'
      .setProperty("MarkStartRotate",true) // EJsS HtmlView.HtmlView Page: setting property 'MarkStartRotate' for element 'h0Kota'
      .setProperty("MarkEndRotate",true) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndRotate' for element 'h0Kota'
      .setProperty("MarkStartHeight",5) // EJsS HtmlView.HtmlView Page: setting property 'MarkStartHeight' for element 'h0Kota'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'h0Kota'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'h0Kota'
      .setProperty("MarkStartWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'MarkStartWidth' for element 'h0Kota'
      .setProperty("MarkEndHeight",5) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndHeight' for element 'h0Kota'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'h0Kota'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'h0Kota'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'h0Kota'
      .setProperty("MarkEndWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndWidth' for element 'h0Kota'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'h0Kota'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"H0", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'H0'
      .setProperty("FontFamily","Vedrana") // EJsS HtmlView.HtmlView Page: setting property 'FontFamily' for element 'H0'
      .setProperty("FontSize",18) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'H0'
      .setProperty("Text","H0") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'H0'
      .setProperty("Font","normal bold 14px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'H0'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"hPom", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hPom'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hPom'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hPom'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'hPom'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"hKota", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hKota'
      .setProperty("MarkStartRotate",true) // EJsS HtmlView.HtmlView Page: setting property 'MarkStartRotate' for element 'hKota'
      .setProperty("MarkStartHeight",5) // EJsS HtmlView.HtmlView Page: setting property 'MarkStartHeight' for element 'hKota'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'hKota'
      .setProperty("MarkStartWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'MarkStartWidth' for element 'hKota'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hKota'
      .setProperty("MarkEndHeight",5) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndHeight' for element 'hKota'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hKota'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'hKota'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'hKota'
      .setProperty("MarkEndWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndWidth' for element 'hKota'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'hKota'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"H", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'H'
      .setProperty("FontFamily","Vedrana") // EJsS HtmlView.HtmlView Page: setting property 'FontFamily' for element 'H'
      .setProperty("FontSize",18) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'H'
      .setProperty("Text","H") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'H'
      .setProperty("Font","normal bold 14px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'H'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vVec", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vVec'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vVec'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vVec'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vVec'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"GVec", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'GVec'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'GVec'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'GVec'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'GVec'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.panelSimulacija) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width",398) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset1.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"audio", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'audio'
      .setProperty("Height",20) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'audio'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'audio'
      .setProperty("Loop",false) // EJsS HtmlView.HtmlView Page: setting property 'Loop' for element 'audio'
      .setProperty("Volume",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Volume' for element 'audio'
      .setProperty("Controls",true) // EJsS HtmlView.HtmlView Page: setting property 'Controls' for element 'audio'
      .setProperty("Autoplay",false) // EJsS HtmlView.HtmlView Page: setting property 'Autoplay' for element 'audio'
      .setProperty("AudioUrl","./audio/SlobodanPad/slobodanPadMuzika.mp3") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'audio'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelBool", _view.panelSimulacija) // EJsS HtmlView.HtmlView Page: declaration of element 'panelBool'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"prikazV", _view.panelBool) // EJsS HtmlView.HtmlView Page: declaration of element 'prikazV'
      .setProperty("Text","prikaz brzina") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'prikazV'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"prikazSilaChb", _view.panelBool) // EJsS HtmlView.HtmlView Page: declaration of element 'prikazSilaChb'
      .setProperty("Text","prikaz sila") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'prikazSilaChb'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"zvukChb", _view.panelBool) // EJsS HtmlView.HtmlView Page: declaration of element 'zvukChb'
      .setProperty("Text","zvuk") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'zvukChb'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelPromenljive", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panelPromenljive'
      .setProperty("Width",300) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panelPromenljive'
      .setProperty("CSS",{"display":"inline-block","vertical-align": "top","margin":"10px", "border-style":"solid",  "border-width":"1px","border-color":"gray" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panelPromenljive'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelUnos", _view.panelPromenljive) // EJsS HtmlView.HtmlView Page: declaration of element 'panelUnos'
      .setProperty("CSS",{"display":"block","vertical-align": "top","margin-bottom":"20px", "border-bottom":"solid thin black","padding-bottom":"20px" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panelUnos'
      .setProperty("Background","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'panelUnos'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelPanelUnos", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanelUnos'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'labelPanelUnos'
      .setProperty("CSS",{"display":"block","border-style":"solid",
  "border-width":"1px",
  "border-color":"gray"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'labelPanelUnos'
      .setProperty("Text","<h3>Unos promenljivih</h3>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelPanelUnos'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"hPan", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'hPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"h0Lab", _view.hPan) // EJsS HtmlView.HtmlView Page: declaration of element 'h0Lab'
      .setProperty("Height",25) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'h0Lab'
      .setProperty("Width",35) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'h0Lab'
      .setProperty("Text","H0") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'h0Lab'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderH", _view.hPan) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderH'
      .setProperty("Width",250) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'sliderH'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'sliderH'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderH'
      .setProperty("Step",2.0) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'sliderH'
      .setProperty("Maximum",50) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'sliderH'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderH'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'sliderH'
      .setProperty("TextWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'TextWidth' for element 'sliderH'
      .setProperty("LabelCSS",{"display":"inline-block","text-align":"center"}) // EJsS HtmlView.HtmlView Page: setting property 'LabelCSS' for element 'sliderH'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panZaust", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'panZaust'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"zaustaviChB", _view.panZaust) // EJsS HtmlView.HtmlView Page: declaration of element 'zaustaviChB'
      .setProperty("Height",25) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'zaustaviChB'
      .setProperty("Text","zaustavljanje") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'zaustaviChB'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelTZaust", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'panelTZaust'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelZaust", _view.panelTZaust) // EJsS HtmlView.HtmlView Page: declaration of element 'labelZaust'
      .setProperty("Text","tZ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelZaust'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderTz", _view.panelTZaust) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderTz'
      .setProperty("Width",200) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'sliderTz'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'sliderTz'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'sliderTz'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderTz'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'sliderTz'
      .setProperty("TextWidth",50) // EJsS HtmlView.HtmlView Page: setting property 'TextWidth' for element 'sliderTz'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelOdbijanje", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'panelOdbijanje'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"odbijanjeChB", _view.panelOdbijanje) // EJsS HtmlView.HtmlView Page: declaration of element 'odbijanjeChB'
      .setProperty("Text","odbijanje") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'odbijanjeChB'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelMasa", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'panelMasa'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelMasa", _view.panelMasa) // EJsS HtmlView.HtmlView Page: declaration of element 'labelMasa'
      .setProperty("Text","m=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelMasa'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderM", _view.panelMasa) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderM'
      .setProperty("Width",200) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'sliderM'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'sliderM'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'sliderM'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderM'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderM'
      .setProperty("TextWidth",50) // EJsS HtmlView.HtmlView Page: setting property 'TextWidth' for element 'sliderM'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelPrikaz", _view.panelPromenljive) // EJsS HtmlView.HtmlView Page: declaration of element 'panelPrikaz'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panelPrikaz'
      .setProperty("CSS",{"display":"block","vertical-align": "top","margin-bottom":"20px", "border-bottom":"solid thin black","padding-bottom":"20px" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panelPrikaz'
      .setProperty("Background","rgba(64,255,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'panelPrikaz'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelPanelPrikaz", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanelPrikaz'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'labelPanelPrikaz'
      .setProperty("CSS",{"display":"block","border-style":"solid",
  "border-width":"1px",
  "border-color":"gray"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'labelPanelPrikaz'
      .setProperty("Text","<h3>Prikaz promenljivih dobijenih</h3>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelPanelPrikaz'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelPromenljiveSimulacijom", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'panelPromenljiveSimulacijom'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panelPromenljiveSimulacijom'
      .setProperty("CSS",{"display":"inline-block","vertical-align": "top","margin-bottom":"20px", "border-bottom":"solid thin black","padding-bottom":"20px" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panelPromenljiveSimulacijom'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelPanelPrikazSimulacijom", _view.panelPromenljiveSimulacijom) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanelPrikazSimulacijom'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'labelPanelPrikazSimulacijom'
      .setProperty("CSS",{"display":"block","border-style":"solid",
  "border-width":"1px",
  "border-color":"gray"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'labelPanelPrikazSimulacijom'
      .setProperty("Text","<h5>SIMULACIJOM</h5>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelPanelPrikazSimulacijom'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"vPanel", _view.panelPromenljiveSimulacijom) // EJsS HtmlView.HtmlView Page: declaration of element 'vPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vLab", _view.vPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vLab'
      .setProperty("Text","v=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"vTF", _view.vPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vTF'
      .setProperty("Height",20) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'vTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'vTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'vTF'
      .setProperty("Background","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'vTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vJed", _view.vPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vJed'
      .setProperty("Text","m/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelTz", _view.panelPromenljiveSimulacijom) // EJsS HtmlView.HtmlView Page: declaration of element 'panelTz'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vTzLab", _view.panelTz) // EJsS HtmlView.HtmlView Page: declaration of element 'vTzLab'
      .setProperty("Text","vTz") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vTzLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"vTzTF", _view.panelTz) // EJsS HtmlView.HtmlView Page: declaration of element 'vTzTF'
      .setProperty("Height",25) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'vTzTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'vTzTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'vTzTF'
      .setProperty("Background","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vTzTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'vTzTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vTZJed", _view.panelTz) // EJsS HtmlView.HtmlView Page: declaration of element 'vTZJed'
      .setProperty("Text","m/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vTZJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelHz", _view.panelPromenljiveSimulacijom) // EJsS HtmlView.HtmlView Page: declaration of element 'panelHz'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"HzLab", _view.panelHz) // EJsS HtmlView.HtmlView Page: declaration of element 'HzLab'
      .setProperty("Text","Hz") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'HzLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"HzTF", _view.panelHz) // EJsS HtmlView.HtmlView Page: declaration of element 'HzTF'
      .setProperty("Height",25) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'HzTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'HzTF'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'HzTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'HzTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"HzJed", _view.panelHz) // EJsS HtmlView.HtmlView Page: declaration of element 'HzJed'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'HzJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"EkPanel", _view.panelPromenljiveSimulacijom) // EJsS HtmlView.HtmlView Page: declaration of element 'EkPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EkLab", _view.EkPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'EkLab'
      .setProperty("Text","Ek=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EkLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"EkTF", _view.EkPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'EkTF'
      .setProperty("Height",20) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'EkTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'EkTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'EkTF'
      .setProperty("Background","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'EkTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'EkTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EkJed", _view.EkPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'EkJed'
      .setProperty("Text","J") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EkJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"EpPanel", _view.panelPromenljiveSimulacijom) // EJsS HtmlView.HtmlView Page: declaration of element 'EpPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EpLab", _view.EpPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'EpLab'
      .setProperty("Text","Ep=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EpLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"EpTF", _view.EpPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'EpTF'
      .setProperty("Height",20) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'EpTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'EpTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'EpTF'
      .setProperty("Background","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'EpTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'EpTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EpJed", _view.EpPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'EpJed'
      .setProperty("Text","J") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EpJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelPromenljiveRacunski", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'panelPromenljiveRacunski'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panelPromenljiveRacunski'
      .setProperty("CSS",{"display":"inline-block","vertical-align": "top","margin-bottom":"20px", "border-bottom":"solid thin black","padding-bottom":"20px" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panelPromenljiveRacunski'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelPanelPrikazRacunski", _view.panelPromenljiveRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanelPrikazRacunski'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'labelPanelPrikazRacunski'
      .setProperty("CSS",{"display":"block","border-style":"solid",
  "border-width":"1px",
  "border-color":"gray"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'labelPanelPrikazRacunski'
      .setProperty("Text","<h5>RAČUNSKI</h5>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelPanelPrikazRacunski'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"vPanel2", _view.panelPromenljiveRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'vPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vLab2", _view.vPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vLab2'
      .setProperty("Text","v=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vLab2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"vRTF", _view.vPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vRTF'
      .setProperty("Height",20) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'vRTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'vRTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'vRTF'
      .setProperty("Background","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vRTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'vRTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vJed2", _view.vPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vJed2'
      .setProperty("Text","m/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vJed2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelTzRacunski", _view.panelPromenljiveRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'panelTzRacunski'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vTzLabRac", _view.panelTzRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'vTzLabRac'
      .setProperty("Text","vTz") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vTzLabRac'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"vTzTFRac", _view.panelTzRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'vTzTFRac'
      .setProperty("Height",25) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'vTzTFRac'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'vTzTFRac'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'vTzTFRac'
      .setProperty("Background","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vTzTFRac'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'vTzTFRac'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vTZJedRac", _view.panelTzRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'vTZJedRac'
      .setProperty("Text","m/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vTZJedRac'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelHzRac", _view.panelPromenljiveRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'panelHzRac'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"HzLabRac", _view.panelHzRac) // EJsS HtmlView.HtmlView Page: declaration of element 'HzLabRac'
      .setProperty("Text","Hz") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'HzLabRac'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"HzTFRac", _view.panelHzRac) // EJsS HtmlView.HtmlView Page: declaration of element 'HzTFRac'
      .setProperty("Height",25) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'HzTFRac'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'HzTFRac'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'HzTFRac'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'HzTFRac'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"HzJed2", _view.panelHzRac) // EJsS HtmlView.HtmlView Page: declaration of element 'HzJed2'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'HzJed2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"EkPanelRac", _view.panelPromenljiveRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'EkPanelRac'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EkLabRac", _view.EkPanelRac) // EJsS HtmlView.HtmlView Page: declaration of element 'EkLabRac'
      .setProperty("Text","Ek=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EkLabRac'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"EkTFRac", _view.EkPanelRac) // EJsS HtmlView.HtmlView Page: declaration of element 'EkTFRac'
      .setProperty("Height",20) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'EkTFRac'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'EkTFRac'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'EkTFRac'
      .setProperty("Background","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'EkTFRac'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'EkTFRac'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EkJedRac", _view.EkPanelRac) // EJsS HtmlView.HtmlView Page: declaration of element 'EkJedRac'
      .setProperty("Text","J") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EkJedRac'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"EpPanelRac", _view.panelPromenljiveRacunski) // EJsS HtmlView.HtmlView Page: declaration of element 'EpPanelRac'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EpLabRac", _view.EpPanelRac) // EJsS HtmlView.HtmlView Page: declaration of element 'EpLabRac'
      .setProperty("Text","Ep=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EpLabRac'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"EpTFRac", _view.EpPanelRac) // EJsS HtmlView.HtmlView Page: declaration of element 'EpTFRac'
      .setProperty("Height",20) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'EpTFRac'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'EpTFRac'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'EpTFRac'
      .setProperty("Background","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'EpTFRac'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'EpTFRac'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"EpJedRac", _view.EpPanelRac) // EJsS HtmlView.HtmlView Page: declaration of element 'EpJedRac'
      .setProperty("Text","J") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'EpJedRac'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"boing", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'boing'
      .setProperty("Loop",false) // EJsS HtmlView.HtmlView Page: setting property 'Loop' for element 'boing'
      .setProperty("Volume",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Volume' for element 'boing'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'boing'
      .setProperty("AudioUrl","./audio/SlobodanPad/boing.mp3") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'boing'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"narrativePanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'narrativePanel'
      .setProperty("Html","<h2>Opis simulacije slobodnog pada</h2> <p>Telo koje se nalazi na visini h0 od površine zemlje,
	  počeće da slobodno pada pod dejstvom sile zemljine teže ubrzanjem g=9.81m/s2.  
	  Slobodan pad zapravo predstavlja ravnomerno ubrzano kretanje pod dejstvom sile teže,
	  pod pretpostavlom da se telo nalazi u vakuumu.  Pri tome se brzina povećava svake sekunde za g=9.81m/s2. 
	  U svakoj sledećoj iteraciji vidimo da se telo pomeri za veći razmak(ljubičasti  krugovi na simulaciji). 
	  Brzina je najveća pri udaru o zemlju</p> <p>Na panelu za unos, pomoću slajdera,
	  može se menjati početna visina i masa tela. Takođe se može ispitati brzina i položaj tela posle nekog vremena tZ. 
	  Da bi se moglo ovo vreme podesiti pomoću slajdera, mora se prvo čekirati chech box \"zaustavljanje\". 
	  Štikliranjem ili deštikliranjem dugmeta za izbor \"odbijanje\" , 
	  bira se, da li da se telo pri udaru o zemlju odbije i nastavi da se kreće ili 
	  če se pri padu animacija zaustaviti. </p>
	  <p>U panelu za prikaz promenljivih prikazuju se vrednosti dobijene računski, 
	  kao i promenljive dobijene simuliranjem. Ove dve vrednosti se mogu  uporediti i vidi se da postoji mala greška.
	  Veličine koje se prikazuju su: trenutna brzina v, brzina pri zaustavljanju posle vremena tZ ili 
	  brzina pri padu, ako je dečeirano odbijanje. Zatim se prikazuje visina pri zaustavljanju, 
	  kao i kinetička i potencijalna energija u toku simulacije.</p> 
	  <p>U toku simulacije mogu se po potrebi prikazati vektor brzine tela, 
	  kao i sila teže, izborom odgovarajućeg ček boksa ispod slike.</p>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'narrativePanel'
      ;

    _view._addElement(EJSS_INTERFACE.video,"padT", _view.narrativePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'padT'
      .setProperty("Height",100) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'padT'
      .setProperty("Width",200) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'padT'
      .setProperty("Loop",false) // EJsS HtmlView.HtmlView Page: setting property 'Loop' for element 'padT'
      .setProperty("Volume",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Volume' for element 'padT'
      .setProperty("Controls",false) // EJsS HtmlView.HtmlView Page: setting property 'Controls' for element 'padT'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'padT'
      .setProperty("Autoplay",false) // EJsS HtmlView.HtmlView Page: setting property 'Autoplay' for element 'padT'
      .setProperty("VideoUrl","./video/SlobodanPad/padTela.mp4") // EJsS HtmlView.HtmlView Page: setting property 'VideoUrl' for element 'padT'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'padT'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
   <div class="container moj-header">
     <div class="row">
   <div class=" nav content d-flex justify-content-center bg-info col-xs-12 col-md-12 col-lg-12">
    <% include ../partials/header %>
	</div>
	</div>
	 <div class="row">
    <div role="button" id="_topFrame" style="text-align:center"></div>
	</div>
	<hr />
	<div class="row">
      <a href="https://izprogramiranja.weebly.com/animacije_u_javi_primer.html"><b>Animacije u Javi</b></a>
	  </div>
	  <div class="row">
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Autor simulacije:</b>
      <p>
      </p>
      <p>
 Slobodan Tršek
      </p>
    </div>
    <hr />
    <p></p>
	</div>
	 <div class="row">
    <div id="copyright_message">
     
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
	</div>
  </div>
 
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new SlobodanPad("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
	<div class="row">
	 <div class="content">
   <footer>
	<% include ../partials/scripts %>
    <% include ../partials/footer %>
</footer>
</div>
</div>
	</div>
  </body>
</html>
