<!DOCTYPE html>
<html lang="sr">
<head>
    <% include ../partials/head %>
	<title>Klizanje tela niz strmu ravan</title>
	
  <meta name="description" content="Kružna animacija u p5.js uz vizuelizaciju kretanja tela niz strmu ravan.">
  <link rel="canonical" href="https://kosi-hitac.onrender.com/klizanje_tela_niz_strmu_ravan" />
  
   <style>
  
    #sketch-holder {
      width: 100%;
      max-width: 600px;
      margin: 20px auto;
      border: 1px solid #ccc;
    }
  </style>
</head>
<body>
  <div class="container d-flex flex-column align-items-start justify-content-center mb-3">
    <div class="row">
      <div class="col-xs-12">
        <header>
          <% include ../partials/header %>
        </header>
      </div>
    </div>

    <div class="row">
      <div class="naslov col-xs-12">
        <h1>Klizanje tela niz strmu ravan</h1>
      </div>
      <hr>
    </div>

    <div class="row">
      <div class="moj_tekst col-xs-12">
        <p>
          Klizanje tela niz strmu ravan je klasičan problem iz dinamike u fizici. 
          Kada telo klizi po ravni koja zaklapa ugao <code>α</code> sa horizontalom, 
          komponenta gravitacione sile duž ravni je <code>m·g·sin(α)</code>. 
          Ako zanemarimo trenje, ubrzanje tela je:
        </p>
        <p style="text-align: center;"><strong>a = g·sin(α)</strong></p>
        <p>
          U realnim uslovima često se uvodi koeficijent trenja <code>μ</code>, pa se 
          rezultujuća sila duž ravni smanjuje za <code>μ·m·g·cos(α)</code>, 
          a ubrzanje postaje:
        </p>
        <p style="text-align: center;"><strong>a = g·(sin(α) – μ·cos(α))</strong></p>
        <h2>Simulacija u Processing‑u</h2>
        <p>
          Za interaktivnu simulaciju klizanja tela niz strmu ravan u Processing‑u, pogledajte primer:
          <a href="https://www.svetprogramiranja.com/primer_strma_ravan_u_processingu.html" target="_blank">
            Primer strma ravan u Processing‑u
          </a>.
        </p>
        
        <h2>Resursi</h2>
        <ul>
          <li><a href="https://p5js.org/" target="_blank">p5.js zvanični sajt</a></li>
          <li><a href="https://processing.org/" target="_blank">Processing zvanični sajt</a></li>
          <li><a href="https://www.svetprogramiranja.com/primer_strma_ravan_u_processingu.html" target="_blank">Primer strma ravan u Processing‑u</a></li>
          <li><a href="https://www.um.es/fem/EjsWiki/Main/Download" target="_blank">Easy Java Simulation (EJS)</a></li>
          <li><a href="https://www.compadre.org/osp/" target="_blank">Open Source Physics (OSP)</a></li>
        </ul>
      </div>
    </div>
	
	<div class="moj_tekst">
  <h3 class="okvir_3">Teorija: Sile na nagnutoj ravni</h3>
  <p>
    Na telo mase <code>m</code> koje leži na ravni nagnutoj pod uglom <code>α</code> deluju sledeće sile:
  </p>
  <ul>
    <li><strong>Težina</strong> <code>Q = m·g</code>, usmerena vertikalno naniže.</li>
    <li><strong>Komponenta težine paralelna ravan</strong>  
      <code>Qₓ = Q·sin(α) = m·g·sin(α)</code>, usmerena naniže duž ravni.</li>
    <li><strong>Komponenta težine normalna na ravan</strong>  
      <code>Qᵧ = Q·cos(α) = m·g·cos(α)</code>, usmerena u ravni prema unutra.</li>
    <li><strong>Normalna sila</strong> <code>N = Qᵧ = m·g·cos(α)</code>, suprotna <code>Qᵧ</code>.</li>
    <li><strong>Trenje</strong> <code>Fₜᵣ = μ·N = μ·m·g·cos(α)</code>, suprotno smeru klizanja.</li>
  </ul>

  <p style="text-align:center;">
    <img src="/images/StrmaRavan/StrmaRavanTelo.jpg" 
         alt="Telo na nagnutoj ravni sa silama" 
         style="max-width:100%; height:auto; border:1px solid #ccc;">
  </p>

  <p>
    U simulaciji računamo akceleraciju duž ravni kao razliku paralelne komponente težine i trenja, podeljenu sa masom:
  </p>
  <pre><code>
a = (Qₓ – Fₜᵣ) / m 
  = [m·g·sin(α) – μ·m·g·cos(α)] / m
  = g·sin(α) – μ·g·cos(α)
  </code></pre>

  <p>
    Pozicija <code>x(t)</code> i brzina <code>v(t)</code> duž ravni dobijaju se standardnim kinematičkim izrazima:
  </p>
  <pre><code>
x(t) = x₀ + v₀·t + ½·a·t²
v(t) = v₀ + a·t
  </code></pre>

  <p>
    Ovako definisani izrazi ulaze u p5.js petlju <code>draw()</code>, gde se u svakoj iteraciji 
    ažuriraju položaj i brzina tela po formuli iznad, a zatim se sve sile crtaju kao strelice u centru bloka.
  </p>
</div>

<div class="moj_tekst">
  <div class="col-12">
    <h2>Animacija klizanja tela niz strmu ravan pomoću alata p5.js</h2>

    <p>
      Ova animacija prikazuje kako blok klizi niz nagib pod uglom <code>α</code> koristeći JavaScript biblioteku 
      <strong>p5.js</strong>. U centru bloka crtaju se sile:
      <code>Qₓ</code> (paralelna komponenta težine), <code>Qᵧ</code> (normalna komponenta), 
      <code>N</code> (normalna sila) i <code>Fₜᵣ</code> (trenje).
    </p>

    <p>
      U svakoj iteraciji izračunavamo ubrzanje
      <code>a = g·sin(α) – μ·g·cos(α)</code>, ažuriramo brzinu i položaj bloka, i crtamo
      strelice koje predstavljaju sve sile. Kada blok stigne do kraja ravni, animacija se kratko zaustavlja,
      blok se vraća u početni položaj i proces se ponavlja.
    </p>

    <h3>Primer animacije:</h3>
    <div id="sketch-holder" style="margin-top: 20px;"></div>

    <p class="mt-4">
      U nastavku možete dodati kontrole za ugao nagiba, koeficijent trenja ili početnu brzinu bloka, 
      kako biste eksperimentisali sa ponašanjem simulacije.
    </p>
  </div>
</div>
<div class="moj_tekst">
  <h3 class="okvir_3">Objašnjenje koda animacije klizanja</h3>

  <ul>
    <li>
      <strong>Globalne promenljive:</strong>
      ugao nagiba <code>alpha</code> (pozitivno: ravan pada s leva na desno naniže),  
      pozicija centra bloka <code>blockPos</code>,  
      veličina bloka <code>blockSize</code>,  
      gravitaciono ubrzanje <code>g</code>,  
      koeficijent trenja <code>mu</code>.
    </li>
    <li>
      U <code>setup()</code> metodu:
      <ol>
        <li>Napraviti <code>createCanvas(600,400)</code> i ugraditi ga u <code>&lt;div id="sketch-holder"&gt;</code> sa <code>canvas.parent(...)</code>.</li>
        <li>Postaviti <code>alpha = PI/6</code> i izračunati startnu poziciju:
          <pre><code>startX = 150;
startY = startX * tan(alpha);
blockPos = createVector(startX, startY);</code></pre>
        </li>
        <li>Podesiti <code>angleMode(RADIANS)</code>, <code>rectMode(CENTER)</code>, <code>textAlign(LEFT,CENTER)</code>.</li>
      </ol>
    </li>
    <li>
      U <code>draw()</code> metodu:
      <ol>
        <li>Podešavanje pozadine: <code>background(240)</code>.</li>
        <li>Pozivi <code>drawIncline()</code> (linija i ispunjeni trougao) i <code>drawBlockAndForces()</code> (blok + sile).</li>
        <li>Poziv <code>updateMotion()</code> za ažuriranje brzine i položaja, pauzu i resetovanje.</li>
      </ol>
    </li>
    <li>
      Metode za crtanje koriste:
      <ul>
        <li><code>push()</code> / <code>pop()</code> — čuvanje i vraćanje transformacione matrice.</li>
        <li><code>translate(x,y)</code> — pomeranje koordinatnog sistema.</li>
        <li><code>rotate(α)</code> — rotacija koordinata.</li>
      </ul>
      … (tačkice označavaju da između push() i pop() možete kombinovati više translate/rotate poziva, a sve će se vratiti na početno stanje nakon pop()).
    </li>
    <li>
      Funkcija <code>updateMotion()</code> (ili inline kod u <code>draw()</code>) radi ovako:
      <pre><code>// ubrzanje niz ravan
blockAcc = g*sin(alpha) - mu*g*cos(alpha);
// svaka iteracija:
blockVel += blockAcc * deltaT;
blockPos.x += blockVel * deltaT;
// provera da li je blok stigao do desne ivice i pauza/reset…
</code></pre>
    </li>
  </ul>

  <p>
    Ovako definisani koraci čine kod modularnim, lakšim za razumevanje i održavanje.  
    Za detaljnije objašnjenje transformacija, pogledajte dokumentaciju p5.js za <code>push()/pop()</code>, 
    <code>translate()</code> i <code>rotate()</code>.
  </p>
</div>


    <div class="row">
      <div class="col-xs-12">
        <% include ../partials/scripts %>
        <% include ../partials/footer %>
      </div>
    </div>
  </div>
  
  
  <script language="javascript" type="text/javascript" src="js/p5js/StrmaRavan/StrmaRavanOsnovnaSaVektorima.js"></script>
</body>
</html>
