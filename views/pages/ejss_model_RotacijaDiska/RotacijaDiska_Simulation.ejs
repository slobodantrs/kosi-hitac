<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  <% include ../partials/head %>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function RotacijaDiska(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var x; // EjsS Model.Variables.Var Table.x
  var y; // EjsS Model.Variables.Var Table.y
  var dx; // EjsS Model.Variables.Var Table.dx
  var R; // EjsS Model.Variables.Var Table.R
  var fi; // EjsS Model.Variables.Var Table.fi
  var w; // EjsS Model.Variables.Var Table.w
  var alfa; // EjsS Model.Variables.Var Table.alfa
  var dt; // EjsS Model.Variables.Var Table.dt
  var t; // EjsS Model.Variables.Var Table.t
  var I; // EjsS Model.Variables.Var Table.I
  var L; // EjsS Model.Variables.Var Table.L
  var pi; // EjsS Model.Variables.Var Table.pi
  var cssFlow; // EjsS Model.Variables.Var Table.cssFlow
  var razF; // EjsS Model.Variables.Var Table.razF
  var razW; // EjsS Model.Variables.Var Table.razW
  var razL; // EjsS Model.Variables.Var Table.razL
  var razM; // EjsS Model.Variables.Var Table.razM

  var F; // EjsS Model.Variables.Sila.F
  var Ft; // EjsS Model.Variables.Sila.Ft
  var FN; // EjsS Model.Variables.Sila.FN
  var psi; // EjsS Model.Variables.Sila.psi
  var M; // EjsS Model.Variables.Sila.M
  var m; // EjsS Model.Variables.Sila.m
  var Fx; // EjsS Model.Variables.Sila.Fx
  var Fy; // EjsS Model.Variables.Sila.Fy

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      x : x,
      y : y,
      dx : dx,
      R : R,
      fi : fi,
      w : w,
      alfa : alfa,
      dt : dt,
      t : t,
      I : I,
      L : L,
      pi : pi,
      cssFlow : cssFlow,
      razF : razF,
      razW : razW,
      razL : razL,
      razM : razM,
      F : F,
      Ft : Ft,
      FN : FN,
      psi : psi,
      M : M,
      m : m,
      Fx : Fx,
      Fy : Fy
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      x : x,
      y : y,
      dx : dx,
      R : R,
      fi : fi,
      w : w,
      alfa : alfa,
      dt : dt,
      t : t,
      I : I,
      L : L,
      pi : pi,
      cssFlow : cssFlow,
      razF : razF,
      razW : razW,
      razL : razL,
      razM : razM,
      F : F,
      Ft : Ft,
      FN : FN,
      psi : psi,
      M : M,
      m : m,
      Fx : Fx,
      Fy : Fy
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.fi != "undefined") fi = json.fi;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.alfa != "undefined") alfa = json.alfa;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.cssFlow != "undefined") cssFlow = json.cssFlow;
    if(typeof json.razF != "undefined") razF = json.razF;
    if(typeof json.razW != "undefined") razW = json.razW;
    if(typeof json.razL != "undefined") razL = json.razL;
    if(typeof json.razM != "undefined") razM = json.razM;
    if(typeof json.F != "undefined") F = json.F;
    if(typeof json.Ft != "undefined") Ft = json.Ft;
    if(typeof json.FN != "undefined") FN = json.FN;
    if(typeof json.psi != "undefined") psi = json.psi;
    if(typeof json.M != "undefined") M = json.M;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.Fx != "undefined") Fx = json.Fx;
    if(typeof json.Fy != "undefined") Fy = json.Fy;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.fi != "undefined") fi = json.fi;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.alfa != "undefined") alfa = json.alfa;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.cssFlow != "undefined") cssFlow = json.cssFlow;
    if(typeof json.razF != "undefined") razF = json.razF;
    if(typeof json.razW != "undefined") razW = json.razW;
    if(typeof json.razL != "undefined") razL = json.razL;
    if(typeof json.razM != "undefined") razM = json.razM;
    if(typeof json.F != "undefined") F = json.F;
    if(typeof json.Ft != "undefined") Ft = json.Ft;
    if(typeof json.FN != "undefined") FN = json.FN;
    if(typeof json.psi != "undefined") psi = json.psi;
    if(typeof json.M != "undefined") M = json.M;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.Fx != "undefined") Fx = json.Fx;
    if(typeof json.Fy != "undefined") Fy = json.Fy;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Evol Page 2"] = false;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    x = 0; // EjsS Model.Variables.Var Table.x
    y = 0; // EjsS Model.Variables.Var Table.y
    dx = 0.01; // EjsS Model.Variables.Var Table.dx
    R = 0.8; // EjsS Model.Variables.Var Table.R
    fi = 0; // EjsS Model.Variables.Var Table.fi
    w = 1; // EjsS Model.Variables.Var Table.w
    alfa = 0.0; // EjsS Model.Variables.Var Table.alfa
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    t = 0; // EjsS Model.Variables.Var Table.t
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    cssFlow = {"display":"inline-block", "margin":"10px", "vertical-align": "top"}; // EjsS Model.Variables.Var Table.cssFlow
    razF = 0.4; // EjsS Model.Variables.Var Table.razF
    razW = 0.2; // EjsS Model.Variables.Var Table.razW
    razL = 0.1; // EjsS Model.Variables.Var Table.razL
    razM = 0.5; // EjsS Model.Variables.Var Table.razM
  });

  _model.addToReset(function() {
    F = 0.5; // EjsS Model.Variables.Sila.F
    psi = 45; // EjsS Model.Variables.Sila.psi
    m = 10; // EjsS Model.Variables.Sila.m
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  // Converts from degrees to radians.  // > CustomCode.Lib Page:1
  radians = function(degrees) {  // > CustomCode.Lib Page:2
    return degrees * Math.PI / 180;  // > CustomCode.Lib Page:3
  };  // > CustomCode.Lib Page:4
     // > CustomCode.Lib Page:5
  // Converts from radians to degrees.  // > CustomCode.Lib Page:6
  degrees = function(radians) {  // > CustomCode.Lib Page:7
    return radians * 180 / Math.PI;  // > CustomCode.Lib Page:8
  };  // > CustomCode.Lib Page:9
  function sizeWZ () {  // > CustomCode.Lib Page:10
    if(w>25){  // > CustomCode.Lib Page:11
        // > CustomCode.Lib Page:12
      return 25;  // > CustomCode.Lib Page:13
      }  // > CustomCode.Lib Page:14
      else{  // > CustomCode.Lib Page:15
        return w;  // > CustomCode.Lib Page:16
        }  // > CustomCode.Lib Page:17
  };  // > CustomCode.Lib Page:18
  function sizeLZ (){  // > CustomCode.Lib Page:19
    if(L>=40){  // > CustomCode.Lib Page:20
        // > CustomCode.Lib Page:21
      return 40;  // > CustomCode.Lib Page:22
      }  // > CustomCode.Lib Page:23
      else{  // > CustomCode.Lib Page:24
        return L;  // > CustomCode.Lib Page:25
        }  // > CustomCode.Lib Page:26
  };  // > CustomCode.Lib Page:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    Ft=F*Math.sin(radians(psi));  // > Initialization.Init Page:1
    FN=F*Math.cos(radians(psi));  // > Initialization.Init Page:2
    M=Ft*R;  // > Initialization.Init Page:3
    I=m*R*R/2;  // > Initialization.Init Page:4
    alfa=M/I;  // > Initialization.Init Page:5
    L=I*w;  // > Initialization.Init Page:6
    x=R*Math.cos(fi);  // > Initialization.Init Page:7
    y=R*Math.sin(fi);  // > Initialization.Init Page:8
    Fx=F*Math.sin(fi+radians(psi));  // > Initialization.Init Page:9
    Fy=F*Math.cos(fi+radians(psi));  // > Initialization.Init Page:10
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    t=t+dt;  // > Evolution.Evol Page:1
    var dfi;  // > Evolution.Evol Page:2
    dfi=w*dt;  // > Evolution.Evol Page:3
    fi=fi+dfi;  // > Evolution.Evol Page:4
    w=w+alfa*dt;  // > Evolution.Evol Page:5
    /*var dL;  // > Evolution.Evol Page:6
    dL=M*dt;  // > Evolution.Evol Page:7
    L=L+dL;*/  // > Evolution.Evol Page:8
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page 2"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    if(fi>=2*Math.PI){  // > FixedRelations.FixRel Page:1
      fi=0;  // > FixedRelations.FixRel Page:2
      _view.trail.clear();  // > FixedRelations.FixRel Page:3
    }  // > FixedRelations.FixRel Page:4
    x=R*Math.cos(fi);  // > FixedRelations.FixRel Page:5
    y=R*Math.sin(fi);  // > FixedRelations.FixRel Page:6
    if(t>=15){  // > FixedRelations.FixRel Page:7
      F=0;  // > FixedRelations.FixRel Page:8
      }  // > FixedRelations.FixRel Page:9
    Ft=F*Math.sin(radians(psi));  // > FixedRelations.FixRel Page:10
    FN=F*Math.cos(radians(psi));  // > FixedRelations.FixRel Page:11
    M=Ft*R;  // > FixedRelations.FixRel Page:12
    alfa=M/I;  // > FixedRelations.FixRel Page:13
    L=I*w;  // > FixedRelations.FixRel Page:14
    Fx=F*Math.sin(-fi+radians(psi));  // > FixedRelations.FixRel Page:15
    Fy=F*Math.cos(-fi+radians(psi));  // > FixedRelations.FixRel Page:16
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page 2") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["fi","w","L","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=fi) __mustReinitialize = true;
        __state[__cIn++] = fi;
        if (__state[__cIn]!=w) __mustReinitialize = true;
        __state[__cIn++] = w;
        if (__state[__cIn]!=L) __mustReinitialize = true;
        __state[__cIn++] = L;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        fi = __state[__cOut++];
        w = __state[__cOut++];
        L = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var fi = _aState[__cOut++];
        var w = _aState[__cOut++];
        var L = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = w; // Rate for ODE: Evol Page 2:fi
        _aRate[__cRate++] = alfa; // Rate for ODE: Evol Page 2:w
        _aRate[__cRate++] = M; // Rate for ODE: Evol Page 2:L
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var fi = _aState[__cOut++];
        var w = _aState[__cOut++];
        var L = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        fi = __state[__cOut++];
        w = __state[__cOut++];
        L = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = fi;
        __state[__cIn++] = w;
        __state[__cIn++] = L;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_fi(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_w(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_L(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 1000, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new RotacijaDiska_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.panelUnos.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'panelUnos'
          _view.mPan.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'mPan'
          _view.mTF.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'mTF'
          _view.mTF.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'mTF'
          _view.rPan.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'rPan'
          _view.rTF.linkProperty("Value",  function() { return R; }, function(_v) { R = _v; } ); // HtmlView Page linking property 'Value' for element 'rTF'
          _view.rTF.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'rTF'
          _view.wPan.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'wPan'
          _view.wTF.linkProperty("Value",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'Value' for element 'wTF'
          _view.alfaPan.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'alfaPan'
          _view.alfaTF.linkProperty("Value",  function() { return alfa; }, function(_v) { alfa = _v; } ); // HtmlView Page linking property 'Value' for element 'alfaTF'
          _view.MPan.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'MPan'
          _view.MTF.linkProperty("Value",  function() { return M; }, function(_v) { M = _v; } ); // HtmlView Page linking property 'Value' for element 'MTF'
          _view.LPan.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'LPan'
          _view.LTF.linkProperty("Value",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'Value' for element 'LTF'
          _view.ugaoPan.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'ugaoPan'
          _view.ugaoTF.linkProperty("Value",  function() { return degrees(fi); } ); // HtmlView Page linking property 'Value' for element 'ugaoTF'
          _view.ITF.linkProperty("Value",  function() { return I; }, function(_v) { I = _v; } ); // HtmlView Page linking property 'Value' for element 'ITF'
          _view.containerPanel.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'containerPanel'
          _view.singleDrawingPanel.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'singleDrawingPanel'
          _view.rotacioniDisk2D.linkProperty("SizeX",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeX' for element 'rotacioniDisk2D'
          _view.rotacioniDisk2D.linkProperty("SizeY",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeY' for element 'rotacioniDisk2D'
          _view.marker.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'marker'
          _view.marker.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'marker'
          _view.Sila.linkProperty("SizeX",  function() { return razF*Fx; } ); // HtmlView Page linking property 'SizeX' for element 'Sila'
          _view.Sila.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'Sila'
          _view.Sila.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'Sila'
          _view.Sila.linkProperty("SizeY",  function() { return razF*Fy; } ); // HtmlView Page linking property 'SizeY' for element 'Sila'
          _view.Ft.linkProperty("SizeX",  function() { return razF*Ft*Math.sin(-fi); } ); // HtmlView Page linking property 'SizeX' for element 'Ft'
          _view.Ft.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'Ft'
          _view.Ft.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'Ft'
          _view.Ft.linkProperty("SizeY",  function() { return razF*Ft*Math.cos(-fi); } ); // HtmlView Page linking property 'SizeY' for element 'Ft'
          _view.FN.linkProperty("SizeX",  function() { return razF*FN*Math.cos(fi); } ); // HtmlView Page linking property 'SizeX' for element 'FN'
          _view.FN.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'FN'
          _view.FN.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'FN'
          _view.FN.linkProperty("SizeY",  function() { return razF*FN*Math.sin(fi); } ); // HtmlView Page linking property 'SizeY' for element 'FN'
          _view.trail.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.pocetakUgla.linkProperty("SizeX",  function() { return -R; } ); // HtmlView Page linking property 'SizeX' for element 'pocetakUgla'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.singleDrawing3DPanel.linkProperty("CSS",  function() { return cssFlow; }, function(_v) { cssFlow = _v; } ); // HtmlView Page linking property 'CSS' for element 'singleDrawing3DPanel'
          _view.disk3D.linkProperty("Transformation",  function() { return [[fi,0,0,1]]; } ); // HtmlView Page linking property 'Transformation' for element 'disk3D'
          _view.disk3D.linkProperty("SizeX",  function() { return R*2; } ); // HtmlView Page linking property 'SizeX' for element 'disk3D'
          _view.disk3D.linkProperty("SizeY",  function() { return R*2; } ); // HtmlView Page linking property 'SizeY' for element 'disk3D'
          _view.segment3D.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segment3D'
          _view.segment3D.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segment3D'
          _view.F3D.linkProperty("SizeX",  function() { return razF*Fx; } ); // HtmlView Page linking property 'SizeX' for element 'F3D'
          _view.F3D.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'F3D'
          _view.F3D.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'F3D'
          _view.F3D.linkProperty("SizeY",  function() { return razF*Fy; } ); // HtmlView Page linking property 'SizeY' for element 'F3D'
          _view.Ft3D.linkProperty("SizeX",  function() { return razF*Ft*Math.sin(-fi); } ); // HtmlView Page linking property 'SizeX' for element 'Ft3D'
          _view.Ft3D.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'Ft3D'
          _view.Ft3D.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'Ft3D'
          _view.Ft3D.linkProperty("SizeY",  function() { return razF*Ft*Math.cos(-fi); } ); // HtmlView Page linking property 'SizeY' for element 'Ft3D'
          _view.FN3D.linkProperty("SizeX",  function() { return razF*FN*Math.cos(fi); } ); // HtmlView Page linking property 'SizeX' for element 'FN3D'
          _view.FN3D.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'FN3D'
          _view.FN3D.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'FN3D'
          _view.FN3D.linkProperty("SizeY",  function() { return razF*FN*Math.sin(fi); } ); // HtmlView Page linking property 'SizeY' for element 'FN3D'
          _view.w3D.linkProperty("SizeZ",  function() { return razW*sizeWZ(); } ); // HtmlView Page linking property 'SizeZ' for element 'w3D'
          _view.alfa3D.linkProperty("SizeZ",  function() { return alfa*4; } ); // HtmlView Page linking property 'SizeZ' for element 'alfa3D'
          _view.M3D.linkProperty("SizeZ",  function() { return M; }, function(_v) { M = _v; } ); // HtmlView Page linking property 'SizeZ' for element 'M3D'
          _view.L3D.linkProperty("SizeZ",  function() { return razL*sizeLZ(); } ); // HtmlView Page linking property 'SizeZ' for element 'L3D'
          _view.wText3D.linkProperty("Z",  function() { return razW*sizeWZ(); } ); // HtmlView Page linking property 'Z' for element 'wText3D'
          _view.MText3D.linkProperty("SizeX",  function() { return razM*1.2; } ); // HtmlView Page linking property 'SizeX' for element 'MText3D'
          _view.MText3D.linkProperty("Z",  function() { return M; }, function(_v) { M = _v; } ); // HtmlView Page linking property 'Z' for element 'MText3D'
          _view.MText3D.linkProperty("SizeZ",  function() { return razM*1.2; } ); // HtmlView Page linking property 'SizeZ' for element 'MText3D'
          _view.MText3D.linkProperty("SizeY",  function() { return razM*1.2; } ); // HtmlView Page linking property 'SizeY' for element 'MText3D'
          _view.alText3D.linkProperty("SizeX",  function() { return alfa*14; } ); // HtmlView Page linking property 'SizeX' for element 'alText3D'
          _view.alText3D.linkProperty("Z",  function() { return alfa*4; } ); // HtmlView Page linking property 'Z' for element 'alText3D'
          _view.alText3D.linkProperty("SizeZ",  function() { return alfa*14; } ); // HtmlView Page linking property 'SizeZ' for element 'alText3D'
          _view.alText3D.linkProperty("SizeY",  function() { return alfa*14; } ); // HtmlView Page linking property 'SizeY' for element 'alText3D'
          _view.LText3D.linkProperty("Z",  function() { return razL*sizeLZ(); } ); // HtmlView Page linking property 'Z' for element 'LText3D'
          _view.runPauseButton2.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton2'
          _view.runPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton2'
          _view.runPauseButton2.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton2'
          _view.stepButton2.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.initButton2.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton2'
          _view.resetButton2.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function RotacijaDiska_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = RotacijaDiska_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Uvod','./RotacijaDiska_Intro_1.html');
  _view._addDescriptionPage('Zadaci','./RotacijaDiska_Intro_2.html');
  _view._addDescriptionPage('Opis zadatka 1','./RotacijaDiska_Intro_3.html');
  _view._addDescriptionPage('Opis zadatka 2','./RotacijaDiska_Intro_4.html');

  return _view;
} // end of main function

function RotacijaDiska_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"labelPanel3", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel3", _view.labelPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel3'
      .setProperty("Text","<h1>Unos veličina</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel3'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelUnos", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panelUnos'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"mPan", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'mPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mLab", _view.mPan) // EJsS HtmlView.HtmlView Page: declaration of element 'mLab'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"mTF", _view.mPan) // EJsS HtmlView.HtmlView Page: declaration of element 'mTF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'mTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'mTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'mTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mJed", _view.mPan) // EJsS HtmlView.HtmlView Page: declaration of element 'mJed'
      .setProperty("Text","kg") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"rPan", _view.panelUnos) // EJsS HtmlView.HtmlView Page: declaration of element 'rPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"rLab", _view.rPan) // EJsS HtmlView.HtmlView Page: declaration of element 'rLab'
      .setProperty("Text","r") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'rLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"rTF", _view.rPan) // EJsS HtmlView.HtmlView Page: declaration of element 'rTF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'rTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'rTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'rTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"rJed", _view.rPan) // EJsS HtmlView.HtmlView Page: declaration of element 'rJed'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'rJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelPrikaz", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panelPrikaz'
      .setProperty("BorderStyle","SOLID") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'panelPrikaz'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'panelPrikaz'
      .setProperty("BorderWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'panelPrikaz'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"wPan", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'wPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wLab", _view.wPan) // EJsS HtmlView.HtmlView Page: declaration of element 'wLab'
      .setProperty("Text","w") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"wTF", _view.wPan) // EJsS HtmlView.HtmlView Page: declaration of element 'wTF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'wTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'wTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'wTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wJed", _view.wPan) // EJsS HtmlView.HtmlView Page: declaration of element 'wJed'
      .setProperty("Text","rad/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"alfaPan", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'alfaPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"alfaLab", _view.alfaPan) // EJsS HtmlView.HtmlView Page: declaration of element 'alfaLab'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'alfaLab'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'alfaLab'
      .setProperty("Text","alfa") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'alfaLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"alfaTF", _view.alfaPan) // EJsS HtmlView.HtmlView Page: declaration of element 'alfaTF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'alfaTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'alfaTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'alfaTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'alfaTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"alfaJed", _view.alfaPan) // EJsS HtmlView.HtmlView Page: declaration of element 'alfaJed'
      .setProperty("Text","rad/s2") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'alfaJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"MPan", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'MPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"MLab", _view.MPan) // EJsS HtmlView.HtmlView Page: declaration of element 'MLab'
      .setProperty("Text","M") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'MLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"MTF", _view.MPan) // EJsS HtmlView.HtmlView Page: declaration of element 'MTF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'MTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'MTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'MTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'MTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"MJed", _view.MPan) // EJsS HtmlView.HtmlView Page: declaration of element 'MJed'
      .setProperty("Text","N/m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'MJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"LPan", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'LPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"LLab", _view.LPan) // EJsS HtmlView.HtmlView Page: declaration of element 'LLab'
      .setProperty("Text","L") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'LLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"LTF", _view.LPan) // EJsS HtmlView.HtmlView Page: declaration of element 'LTF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'LTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'LTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'LTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'LTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"LJed", _view.LPan) // EJsS HtmlView.HtmlView Page: declaration of element 'LJed'
      .setProperty("Text","kg*m2/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'LJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"ugaoPan", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'ugaoPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"ugaoLab", _view.ugaoPan) // EJsS HtmlView.HtmlView Page: declaration of element 'ugaoLab'
      .setProperty("Text","ugao") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ugaoLab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"ugaoTF", _view.ugaoPan) // EJsS HtmlView.HtmlView Page: declaration of element 'ugaoTF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'ugaoTF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'ugaoTF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'ugaoTF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'ugaoTF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"ugaoJed", _view.ugaoPan) // EJsS HtmlView.HtmlView Page: declaration of element 'ugaoJed'
      .setProperty("Text","st") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ugaoJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"IPan", _view.panelPrikaz) // EJsS HtmlView.HtmlView Page: declaration of element 'IPan'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"ILab", _view.IPan) // EJsS HtmlView.HtmlView Page: declaration of element 'ILab'
      .setProperty("Text","I") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ILab'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"ITF", _view.IPan) // EJsS HtmlView.HtmlView Page: declaration of element 'ITF'
      .setProperty("Height",30) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'ITF'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'ITF'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'ITF'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'ITF'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"IJed", _view.IPan) // EJsS HtmlView.HtmlView Page: declaration of element 'IJed'
      .setProperty("Text","kg*m2") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'IJed'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"containerPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'containerPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"singleDrawingPanel", _view.containerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'singleDrawingPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Rotacija diska 2D prikaz</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("MinimumX",-1.0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'drawingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'drawingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'drawingPanel'
      .setProperty("MaximumX",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rotacioniDisk2D", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rotacioniDisk2D'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rotacioniDisk2D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'rotacioniDisk2D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'rotacioniDisk2D'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"marker", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'marker'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'marker'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'marker'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'marker'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'marker'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'marker'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"osa", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'osa'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'osa'
      .setProperty("SizeX",0.02) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'osa'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'osa'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'osa'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'osa'
      .setProperty("SizeY",0.02) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'osa'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Sila", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Sila'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Sila'
      .setProperty("MarkStart","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'Sila'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Sila'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Ft", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Ft'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Ft'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Ft'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"FN", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'FN'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'FN'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'FN'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'FN'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("Maximum",300) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'trail'
      .setProperty("SizeX",0.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trail'
      .setProperty("Connected",true) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trail'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'trail'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'trail'
      .setProperty("SizeY",0.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"pocetakUgla", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'pocetakUgla'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'pocetakUgla'
      .setProperty("LineColor","rgb(128,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'pocetakUgla'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'pocetakUgla'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'pocetakUgla'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'pocetakUgla'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset1.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"narrativePanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'narrativePanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'narrativePanel'
      .setProperty("Html","<h2>Opis 2D prikaza simulacije</h2> <p>Na prikazu 2D u stvari predstavlja pogled \"odozgo\" na ravan obrtanja diska.</p> <p>Na proizvoljnu tačku,koja se nalazi na obodu diska deluje sila, pod nekim uglom na radijalni pravac.</p> <p>Ona se može razložiti na dve komponente(projekcije): tangentnu i normalnu(radijalan pravac).</p> <p>Tangentna komponenta sile izaziva ugaono ubrzanje diska, što se može videti na simulaciji.</p>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'narrativePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"singleDrawing3DPanel", _view.containerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawing3DPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'singleDrawing3DPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel2", _view.singleDrawing3DPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel2", _view.labelPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel2'
      .setProperty("Text","<h1>Rotacija diska 3D prikaz</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel2", _view.singleDrawing3DPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel2'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel2'
      ;

    _view._addElement(EJSS_DRAWING3D.drawingPanel,"drawingPanel3D", _view.wrappedPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel3D'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel3D'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel3D'
      .setProperty("Draggable","ANY") // EJsS HtmlView.HtmlView Page: setting property 'Draggable' for element 'drawingPanel3D'
      .setProperty("CameraZ",0.6) // EJsS HtmlView.HtmlView Page: setting property 'CameraZ' for element 'drawingPanel3D'
      .setProperty("CameraY",-0.8) // EJsS HtmlView.HtmlView Page: setting property 'CameraY' for element 'drawingPanel3D'
      .setProperty("Background","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'drawingPanel3D'
      .setProperty("CameraZoomRate",2) // EJsS HtmlView.HtmlView Page: setting property 'CameraZoomRate' for element 'drawingPanel3D'
      .setProperty("CameraAltitude",0.50500000000000) // EJsS HtmlView.HtmlView Page: setting property 'CameraAltitude' for element 'drawingPanel3D'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel3D'
      .setProperty("CameraFocusZ",0.0) // EJsS HtmlView.HtmlView Page: setting property 'CameraFocusZ' for element 'drawingPanel3D'
      .setProperty("MaximumZ",1.2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumZ' for element 'drawingPanel3D'
      .setProperty("CameraFocusY",0.0) // EJsS HtmlView.HtmlView Page: setting property 'CameraFocusY' for element 'drawingPanel3D'
      .setProperty("MaximumY",1.2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'drawingPanel3D'
      .setProperty("CameraFocusX",0.0) // EJsS HtmlView.HtmlView Page: setting property 'CameraFocusX' for element 'drawingPanel3D'
      .setProperty("MaximumX",1.2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'drawingPanel3D'
      .setProperty("MinimumX",-1.2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'drawingPanel3D'
      .setProperty("MinimumY",-1.2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'drawingPanel3D'
      .setProperty("MinimumZ",-1.2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumZ' for element 'drawingPanel3D'
      .setProperty("SizeX",1.7) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'drawingPanel3D'
      .setProperty("CameraAzimuth",-0.18) // EJsS HtmlView.HtmlView Page: setting property 'CameraAzimuth' for element 'drawingPanel3D'
      .setProperty("SizeZ",1.7) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'drawingPanel3D'
      .setProperty("SizeY",1.7) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'drawingPanel3D'
      ;

    _view._addElement(EJSS_DRAWING3D.cylinder,"disk3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'disk3D'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'disk3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'disk3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'disk3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'disk3D'
      .setProperty("SizeZ",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'disk3D'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'disk3D'
      ;

    _view._addElement(EJSS_DRAWING3D.cylinder,"osovina", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'osovina'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'osovina'
      .setProperty("Transparency",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Transparency' for element 'osovina'
      .setProperty("SizeX",0.01) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'osovina'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'osovina'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'osovina'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'osovina'
      .setProperty("SizeZ",2.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'osovina'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'osovina'
      .setProperty("SizeY",0.01) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'osovina'
      ;

    _view._addElement(EJSS_DRAWING3D.segment,"segment3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'segment3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'segment3D'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segment3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'segment3D'
      .setProperty("Z",0.11) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'segment3D'
      .setProperty("SizeZ",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'segment3D'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segment3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"F3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'F3D'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'F3D'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'F3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'F3D'
      .setProperty("SizeZ",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'F3D'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'F3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"Ft3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'Ft3D'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Ft3D'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Ft3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'Ft3D'
      .setProperty("SizeZ",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'Ft3D'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Ft3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"FN3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'FN3D'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'FN3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'FN3D'
      .setProperty("SizeZ",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'FN3D'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'FN3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"w3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'w3D'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'w3D'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'w3D'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'w3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'w3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'w3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'w3D'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'w3D'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'w3D'
      .setProperty("LineWidth",7) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'w3D'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'w3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"alfa3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'alfa3D'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'alfa3D'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'alfa3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'alfa3D'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'alfa3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'alfa3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'alfa3D'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'alfa3D'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'alfa3D'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'alfa3D'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'alfa3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"M3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'M3D'
      .setProperty("FillColor","rgb(128,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'M3D'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'M3D'
      .setProperty("HeadWidth",15) // EJsS HtmlView.HtmlView Page: setting property 'HeadWidth' for element 'M3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'M3D'
      .setProperty("LineColor","rgb(128,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'M3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'M3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'M3D'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'M3D'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'M3D'
      .setProperty("LineWidth",15) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'M3D'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'M3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"L3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'L3D'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'L3D'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'L3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'L3D'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'L3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'L3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'L3D'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'L3D'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'L3D'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'L3D'
      .setProperty("LineWidth",6) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'L3D'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'L3D'
      ;

    _view._addElement(EJSS_DRAWING3D.text,"wText3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'wText3D'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'wText3D'
      .setProperty("X",0.3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'wText3D'
      .setProperty("FontColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'wText3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'wText3D'
      .setProperty("SizeZ",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'wText3D'
      .setProperty("Text","W") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wText3D'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'wText3D'
      .setProperty("Font","normal bold 10px Georgia, serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'wText3D'
      ;

    _view._addElement(EJSS_DRAWING3D.text,"MText3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'MText3D'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'MText3D'
      .setProperty("FontColor","rgb(128,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'MText3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'MText3D'
      .setProperty("Text","M") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'MText3D'
      .setProperty("Font","normal bold 10px Georgia, serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'MText3D'
      ;

    _view._addElement(EJSS_DRAWING3D.text,"alText3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'alText3D'
      .setProperty("X",0.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'alText3D'
      .setProperty("FontColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'alText3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'alText3D'
      .setProperty("Text","alfa") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'alText3D'
      .setProperty("Font","normal bold 10px Georgia, serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'alText3D'
      ;

    _view._addElement(EJSS_DRAWING3D.text,"LText3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'LText3D'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'LText3D'
      .setProperty("X",0.7) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'LText3D'
      .setProperty("FontColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'LText3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'LText3D'
      .setProperty("SizeZ",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'LText3D'
      .setProperty("Text","L") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'LText3D'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'LText3D'
      .setProperty("Font","normal bold 10px Georgia, serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'LText3D'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel2", _view.wrappedPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel2'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel2'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel2'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel2'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel2", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel2", _view.firstRowPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel2'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton2", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton2'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton2'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton2", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton2'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton2'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset1.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"narrativePanel2", _view.singleDrawing3DPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'narrativePanel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'narrativePanel2'
      .setProperty("Html","<h2>Opis 3D simulacije</h2> <p>U početku simulacije obrtanje je ravnomerno ubrzano zbog projekcije sile F na tangencijalni pravac u ravni obrtanja diska</p> <p>Može se primetiti da se vektori ugaone brzine W i momenta količine kretanja L menjaju tokom vremena </p> <p>Po prestanku dejstva sile F, intenziteti ovih vektora dalje ostaju konstantni</p> <p>Na početku simulcije na kuglu deluje sila F pod nekim uglom <strong>psi</strong> u odnosu na pravac poliprečnika.  Ova sila se vidi na simulaciji(sila) plavom bojom, deblja linija, dok su tanje linije njene projekcije na normalni i tangentni pravac.</p>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'narrativePanel2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
   <div class="container moj-header">
     <div class="row">
   <div class=" nav content d-flex justify-content-center bg-info col-xs-12 col-md-12 col-lg-12">
    <% include ../partials/header %>
	</div>
	</div>
	  <div class="row">
    <div role="button" id="_topFrame" style="text-align:center"></div>
	</div>
	  <div class="row">
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Autor simulacije:</b>
      <p>
      </p>
      <p>
 Slobodan Tršek
      </p>
    </div>
    <hr />
    <p></p>
	</div>
	  <div class="row">
    <div id="copyright_message">
      <!--div class="cc_left"  style="float:left">&#169; 2019, Slobodan Tršek.</div-->
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
	</div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new RotacijaDiska("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
	<div class="row">
	 <div class="content">
   <footer>
	<% include ../partials/scripts %>
    <% include ../partials/footer %>
</footer>
</div>
</div>
	</div>
  </body>
</html>
